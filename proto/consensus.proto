syntax = "proto3";

option csharp_namespace = "AElf.Kernel";

import "common.proto";
import "google/protobuf/timestamp.proto";

// Just used as parameter of consensus contract method.
message Term {
    Miners Miners = 1;
    Round FirstRound = 2;
    Round SecondRound = 3;
    int32 MiningInterval = 4;
    uint64 TermNumber = 5;
    google.protobuf.Timestamp Timestamp = 6;
}

// Just used as parameter of consensus contract method.
message Forwarding {
    Round CurrentRoundInfo = 1;
    Round NextRoundInfo = 2;
    uint64 CurrentAge = 3;
}

// Just used as parameter of consensus contract method.
message ToPackage {
    Hash OutValue = 1;
    Hash Signature = 2;
    int64 RoundId = 3;
}

// Just used as parameter of consensus contract method.
message ToBroadcast {
    Hash InValue = 1;
    int64 RoundId = 2;
}

message Miners {
    uint64 TermNumber = 1;
    repeated string PublicKeys = 2;
}

message TermNumberLookUp {
    map<uint64, uint64> Map = 1;// Term number -> Round number.
}

message Candidates {
    repeated string PublicKeys = 1;
}

message Tickets {
    repeated VotingRecord VotingRecords = 1;
    uint64 ExpiredTickets = 2;
    uint64 TotalTickets = 3;
}

message VotingRecord {
    string From = 1;
    string To = 2;
    uint64 Count = 3;
    uint64 RoundNumber = 4;
    Hash TransactionId = 5;
    uint64 VoteAge = 6;
    repeated int32 LockDaysList = 7;// Can be renewed by adding items.
    uint64 UnlockAge = 8;
    uint64 TermNumber = 9;
}

message TermSnapshot {
    uint64 EndRoundNumber = 1;
    uint64 TotalBlocks = 2;
    repeated CandidateInTerm CandidatesSnapshot = 3;
    uint64 TermNumber = 4;
}

message Round {
    uint64 RoundNumber = 1;
    map<string, MinerInRound> RealTimeMinersInfo = 2;
    int32 MiningInterval = 3;
}

message CandidateInTerm {
    string PublicKey = 1;
    uint64 Votes = 2;
}

message MinerInRound {
    int32 Order = 1;
    bool IsExtraBlockProducer = 2;
    Hash InValue = 3;
    Hash OutValue = 4;
    Hash Signature = 5;
    google.protobuf.Timestamp ExpectedMiningTime = 6;
    uint64 ProducedBlocks = 7;
    bool IsForked = 8;
    uint64 MissedTimeSlots = 9;
    uint64 RoundNumber = 10;
    string PublicKey = 11;
    uint64 PackagedTxsCount = 12;
}

message CandidateInHistory {
    repeated uint64 Terms = 1;
    uint64 ProducedBlocks = 2;
    uint64 MissedTimeSlots = 3;
    uint64 ContinualAppointmentCount = 4;
    uint64 ReappointmentCount = 5;
    repeated string Aliases = 6;
}

message TicketsDictionary {
    map<string, Tickets> Maps = 1;
}