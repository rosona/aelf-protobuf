// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: consensus.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AElf.Kernel {

  /// <summary>Holder for reflection information generated from consensus.proto</summary>
  public static partial class ConsensusReflection {

    #region Descriptor
    /// <summary>File descriptor for consensus.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConsensusReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9jb25zZW5zdXMucHJvdG8aDGNvbW1vbi5wcm90bxofZ29vZ2xlL3Byb3Rv",
            "YnVmL3RpbWVzdGFtcC5wcm90byKzAQoEVGVybRIXCgZNaW5lcnMYASABKAsy",
            "By5NaW5lcnMSGgoKRmlyc3RSb3VuZBgCIAEoCzIGLlJvdW5kEhsKC1NlY29u",
            "ZFJvdW5kGAMgASgLMgYuUm91bmQSFgoOTWluaW5nSW50ZXJ2YWwYBCABKAUS",
            "EgoKVGVybU51bWJlchgFIAEoBBItCglUaW1lc3RhbXAYBiABKAsyGi5nb29n",
            "bGUucHJvdG9idWYuVGltZXN0YW1wImEKCkZvcndhcmRpbmcSIAoQQ3VycmVu",
            "dFJvdW5kSW5mbxgBIAEoCzIGLlJvdW5kEh0KDU5leHRSb3VuZEluZm8YAiAB",
            "KAsyBi5Sb3VuZBISCgpDdXJyZW50QWdlGAMgASgEIk8KCVRvUGFja2FnZRIX",
            "CghPdXRWYWx1ZRgBIAEoCzIFLkhhc2gSGAoJU2lnbmF0dXJlGAIgASgLMgUu",
            "SGFzaBIPCgdSb3VuZElkGAMgASgDIjYKC1RvQnJvYWRjYXN0EhYKB0luVmFs",
            "dWUYASABKAsyBS5IYXNoEg8KB1JvdW5kSWQYAiABKAMiMAoGTWluZXJzEhIK",
            "ClRlcm1OdW1iZXIYASABKAQSEgoKUHVibGljS2V5cxgCIAMoCSJnChBUZXJt",
            "TnVtYmVyTG9va1VwEicKA01hcBgBIAMoCzIaLlRlcm1OdW1iZXJMb29rVXAu",
            "TWFwRW50cnkaKgoITWFwRW50cnkSCwoDa2V5GAEgASgEEg0KBXZhbHVlGAIg",
            "ASgEOgI4ASIgCgpDYW5kaWRhdGVzEhIKClB1YmxpY0tleXMYASADKAkiXQoH",
            "VGlja2V0cxIkCg1Wb3RpbmdSZWNvcmRzGAEgAygLMg0uVm90aW5nUmVjb3Jk",
            "EhYKDkV4cGlyZWRUaWNrZXRzGAIgASgEEhQKDFRvdGFsVGlja2V0cxgDIAEo",
            "BCK4AQoMVm90aW5nUmVjb3JkEgwKBEZyb20YASABKAkSCgoCVG8YAiABKAkS",
            "DQoFQ291bnQYAyABKAQSEwoLUm91bmROdW1iZXIYBCABKAQSHAoNVHJhbnNh",
            "Y3Rpb25JZBgFIAEoCzIFLkhhc2gSDwoHVm90ZUFnZRgGIAEoBBIUCgxMb2Nr",
            "RGF5c0xpc3QYByADKAUSEQoJVW5sb2NrQWdlGAggASgEEhIKClRlcm1OdW1i",
            "ZXIYCSABKAQifQoMVGVybVNuYXBzaG90EhYKDkVuZFJvdW5kTnVtYmVyGAEg",
            "ASgEEhMKC1RvdGFsQmxvY2tzGAIgASgEEiwKEkNhbmRpZGF0ZXNTbmFwc2hv",
            "dBgDIAMoCzIQLkNhbmRpZGF0ZUluVGVybRISCgpUZXJtTnVtYmVyGAQgASgE",
            "IroBCgVSb3VuZBITCgtSb3VuZE51bWJlchgBIAEoBBI6ChJSZWFsVGltZU1p",
            "bmVyc0luZm8YAiADKAsyHi5Sb3VuZC5SZWFsVGltZU1pbmVyc0luZm9FbnRy",
            "eRIWCg5NaW5pbmdJbnRlcnZhbBgDIAEoBRpIChdSZWFsVGltZU1pbmVyc0lu",
            "Zm9FbnRyeRILCgNrZXkYASABKAkSHAoFdmFsdWUYAiABKAsyDS5NaW5lcklu",
            "Um91bmQ6AjgBIjMKD0NhbmRpZGF0ZUluVGVybRIRCglQdWJsaWNLZXkYASAB",
            "KAkSDQoFVm90ZXMYAiABKAQiwwIKDE1pbmVySW5Sb3VuZBINCgVPcmRlchgB",
            "IAEoBRIcChRJc0V4dHJhQmxvY2tQcm9kdWNlchgCIAEoCBIWCgdJblZhbHVl",
            "GAMgASgLMgUuSGFzaBIXCghPdXRWYWx1ZRgEIAEoCzIFLkhhc2gSGAoJU2ln",
            "bmF0dXJlGAUgASgLMgUuSGFzaBI2ChJFeHBlY3RlZE1pbmluZ1RpbWUYBiAB",
            "KAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhYKDlByb2R1Y2VkQmxv",
            "Y2tzGAcgASgEEhAKCElzRm9ya2VkGAggASgIEhcKD01pc3NlZFRpbWVTbG90",
            "cxgJIAEoBBITCgtSb3VuZE51bWJlchgKIAEoBBIRCglQdWJsaWNLZXkYCyAB",
            "KAkSGAoQUGFja2FnZWRUeHNDb3VudBgMIAEoBCKkAQoSQ2FuZGlkYXRlSW5I",
            "aXN0b3J5Eg0KBVRlcm1zGAEgAygEEhYKDlByb2R1Y2VkQmxvY2tzGAIgASgE",
            "EhcKD01pc3NlZFRpbWVTbG90cxgDIAEoBBIhChlDb250aW51YWxBcHBvaW50",
            "bWVudENvdW50GAQgASgEEhoKElJlYXBwb2ludG1lbnRDb3VudBgFIAEoBBIP",
            "CgdBbGlhc2VzGAYgAygJInYKEVRpY2tldHNEaWN0aW9uYXJ5EioKBE1hcHMY",
            "ASADKAsyHC5UaWNrZXRzRGljdGlvbmFyeS5NYXBzRW50cnkaNQoJTWFwc0Vu",
            "dHJ5EgsKA2tleRgBIAEoCRIXCgV2YWx1ZRgCIAEoCzIILlRpY2tldHM6AjgB",
            "Qg6qAgtBRWxmLktlcm5lbGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AElf.Common.CommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.Term), global::AElf.Kernel.Term.Parser, new[]{ "Miners", "FirstRound", "SecondRound", "MiningInterval", "TermNumber", "Timestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.Forwarding), global::AElf.Kernel.Forwarding.Parser, new[]{ "CurrentRoundInfo", "NextRoundInfo", "CurrentAge" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.ToPackage), global::AElf.Kernel.ToPackage.Parser, new[]{ "OutValue", "Signature", "RoundId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.ToBroadcast), global::AElf.Kernel.ToBroadcast.Parser, new[]{ "InValue", "RoundId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.Miners), global::AElf.Kernel.Miners.Parser, new[]{ "TermNumber", "PublicKeys" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.TermNumberLookUp), global::AElf.Kernel.TermNumberLookUp.Parser, new[]{ "Map" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.Candidates), global::AElf.Kernel.Candidates.Parser, new[]{ "PublicKeys" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.Tickets), global::AElf.Kernel.Tickets.Parser, new[]{ "VotingRecords", "ExpiredTickets", "TotalTickets" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.VotingRecord), global::AElf.Kernel.VotingRecord.Parser, new[]{ "From", "To", "Count", "RoundNumber", "TransactionId", "VoteAge", "LockDaysList", "UnlockAge", "TermNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.TermSnapshot), global::AElf.Kernel.TermSnapshot.Parser, new[]{ "EndRoundNumber", "TotalBlocks", "CandidatesSnapshot", "TermNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.Round), global::AElf.Kernel.Round.Parser, new[]{ "RoundNumber", "RealTimeMinersInfo", "MiningInterval" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.CandidateInTerm), global::AElf.Kernel.CandidateInTerm.Parser, new[]{ "PublicKey", "Votes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.MinerInRound), global::AElf.Kernel.MinerInRound.Parser, new[]{ "Order", "IsExtraBlockProducer", "InValue", "OutValue", "Signature", "ExpectedMiningTime", "ProducedBlocks", "IsForked", "MissedTimeSlots", "RoundNumber", "PublicKey", "PackagedTxsCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.CandidateInHistory), global::AElf.Kernel.CandidateInHistory.Parser, new[]{ "Terms", "ProducedBlocks", "MissedTimeSlots", "ContinualAppointmentCount", "ReappointmentCount", "Aliases" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.TicketsDictionary), global::AElf.Kernel.TicketsDictionary.Parser, new[]{ "Maps" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Just used as parameter of consensus contract method.
  /// </summary>
  public sealed partial class Term : pb::IMessage<Term> {
    private static readonly pb::MessageParser<Term> _parser = new pb::MessageParser<Term>(() => new Term());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Term> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ConsensusReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Term() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Term(Term other) : this() {
      miners_ = other.miners_ != null ? other.miners_.Clone() : null;
      firstRound_ = other.firstRound_ != null ? other.firstRound_.Clone() : null;
      secondRound_ = other.secondRound_ != null ? other.secondRound_.Clone() : null;
      miningInterval_ = other.miningInterval_;
      termNumber_ = other.termNumber_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Term Clone() {
      return new Term(this);
    }

    /// <summary>Field number for the "Miners" field.</summary>
    public const int MinersFieldNumber = 1;
    private global::AElf.Kernel.Miners miners_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Kernel.Miners Miners {
      get { return miners_; }
      set {
        miners_ = value;
      }
    }

    /// <summary>Field number for the "FirstRound" field.</summary>
    public const int FirstRoundFieldNumber = 2;
    private global::AElf.Kernel.Round firstRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Kernel.Round FirstRound {
      get { return firstRound_; }
      set {
        firstRound_ = value;
      }
    }

    /// <summary>Field number for the "SecondRound" field.</summary>
    public const int SecondRoundFieldNumber = 3;
    private global::AElf.Kernel.Round secondRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Kernel.Round SecondRound {
      get { return secondRound_; }
      set {
        secondRound_ = value;
      }
    }

    /// <summary>Field number for the "MiningInterval" field.</summary>
    public const int MiningIntervalFieldNumber = 4;
    private int miningInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MiningInterval {
      get { return miningInterval_; }
      set {
        miningInterval_ = value;
      }
    }

    /// <summary>Field number for the "TermNumber" field.</summary>
    public const int TermNumberFieldNumber = 5;
    private ulong termNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TermNumber {
      get { return termNumber_; }
      set {
        termNumber_ = value;
      }
    }

    /// <summary>Field number for the "Timestamp" field.</summary>
    public const int TimestampFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Term);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Term other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Miners, other.Miners)) return false;
      if (!object.Equals(FirstRound, other.FirstRound)) return false;
      if (!object.Equals(SecondRound, other.SecondRound)) return false;
      if (MiningInterval != other.MiningInterval) return false;
      if (TermNumber != other.TermNumber) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (miners_ != null) hash ^= Miners.GetHashCode();
      if (firstRound_ != null) hash ^= FirstRound.GetHashCode();
      if (secondRound_ != null) hash ^= SecondRound.GetHashCode();
      if (MiningInterval != 0) hash ^= MiningInterval.GetHashCode();
      if (TermNumber != 0UL) hash ^= TermNumber.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (miners_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Miners);
      }
      if (firstRound_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FirstRound);
      }
      if (secondRound_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SecondRound);
      }
      if (MiningInterval != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MiningInterval);
      }
      if (TermNumber != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(TermNumber);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (miners_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Miners);
      }
      if (firstRound_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FirstRound);
      }
      if (secondRound_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SecondRound);
      }
      if (MiningInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MiningInterval);
      }
      if (TermNumber != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TermNumber);
      }
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Term other) {
      if (other == null) {
        return;
      }
      if (other.miners_ != null) {
        if (miners_ == null) {
          miners_ = new global::AElf.Kernel.Miners();
        }
        Miners.MergeFrom(other.Miners);
      }
      if (other.firstRound_ != null) {
        if (firstRound_ == null) {
          firstRound_ = new global::AElf.Kernel.Round();
        }
        FirstRound.MergeFrom(other.FirstRound);
      }
      if (other.secondRound_ != null) {
        if (secondRound_ == null) {
          secondRound_ = new global::AElf.Kernel.Round();
        }
        SecondRound.MergeFrom(other.SecondRound);
      }
      if (other.MiningInterval != 0) {
        MiningInterval = other.MiningInterval;
      }
      if (other.TermNumber != 0UL) {
        TermNumber = other.TermNumber;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          timestamp_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (miners_ == null) {
              miners_ = new global::AElf.Kernel.Miners();
            }
            input.ReadMessage(miners_);
            break;
          }
          case 18: {
            if (firstRound_ == null) {
              firstRound_ = new global::AElf.Kernel.Round();
            }
            input.ReadMessage(firstRound_);
            break;
          }
          case 26: {
            if (secondRound_ == null) {
              secondRound_ = new global::AElf.Kernel.Round();
            }
            input.ReadMessage(secondRound_);
            break;
          }
          case 32: {
            MiningInterval = input.ReadInt32();
            break;
          }
          case 40: {
            TermNumber = input.ReadUInt64();
            break;
          }
          case 50: {
            if (timestamp_ == null) {
              timestamp_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(timestamp_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Just used as parameter of consensus contract method.
  /// </summary>
  public sealed partial class Forwarding : pb::IMessage<Forwarding> {
    private static readonly pb::MessageParser<Forwarding> _parser = new pb::MessageParser<Forwarding>(() => new Forwarding());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Forwarding> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ConsensusReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Forwarding() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Forwarding(Forwarding other) : this() {
      currentRoundInfo_ = other.currentRoundInfo_ != null ? other.currentRoundInfo_.Clone() : null;
      nextRoundInfo_ = other.nextRoundInfo_ != null ? other.nextRoundInfo_.Clone() : null;
      currentAge_ = other.currentAge_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Forwarding Clone() {
      return new Forwarding(this);
    }

    /// <summary>Field number for the "CurrentRoundInfo" field.</summary>
    public const int CurrentRoundInfoFieldNumber = 1;
    private global::AElf.Kernel.Round currentRoundInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Kernel.Round CurrentRoundInfo {
      get { return currentRoundInfo_; }
      set {
        currentRoundInfo_ = value;
      }
    }

    /// <summary>Field number for the "NextRoundInfo" field.</summary>
    public const int NextRoundInfoFieldNumber = 2;
    private global::AElf.Kernel.Round nextRoundInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Kernel.Round NextRoundInfo {
      get { return nextRoundInfo_; }
      set {
        nextRoundInfo_ = value;
      }
    }

    /// <summary>Field number for the "CurrentAge" field.</summary>
    public const int CurrentAgeFieldNumber = 3;
    private ulong currentAge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CurrentAge {
      get { return currentAge_; }
      set {
        currentAge_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Forwarding);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Forwarding other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CurrentRoundInfo, other.CurrentRoundInfo)) return false;
      if (!object.Equals(NextRoundInfo, other.NextRoundInfo)) return false;
      if (CurrentAge != other.CurrentAge) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (currentRoundInfo_ != null) hash ^= CurrentRoundInfo.GetHashCode();
      if (nextRoundInfo_ != null) hash ^= NextRoundInfo.GetHashCode();
      if (CurrentAge != 0UL) hash ^= CurrentAge.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (currentRoundInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CurrentRoundInfo);
      }
      if (nextRoundInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(NextRoundInfo);
      }
      if (CurrentAge != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(CurrentAge);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (currentRoundInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentRoundInfo);
      }
      if (nextRoundInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NextRoundInfo);
      }
      if (CurrentAge != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CurrentAge);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Forwarding other) {
      if (other == null) {
        return;
      }
      if (other.currentRoundInfo_ != null) {
        if (currentRoundInfo_ == null) {
          currentRoundInfo_ = new global::AElf.Kernel.Round();
        }
        CurrentRoundInfo.MergeFrom(other.CurrentRoundInfo);
      }
      if (other.nextRoundInfo_ != null) {
        if (nextRoundInfo_ == null) {
          nextRoundInfo_ = new global::AElf.Kernel.Round();
        }
        NextRoundInfo.MergeFrom(other.NextRoundInfo);
      }
      if (other.CurrentAge != 0UL) {
        CurrentAge = other.CurrentAge;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (currentRoundInfo_ == null) {
              currentRoundInfo_ = new global::AElf.Kernel.Round();
            }
            input.ReadMessage(currentRoundInfo_);
            break;
          }
          case 18: {
            if (nextRoundInfo_ == null) {
              nextRoundInfo_ = new global::AElf.Kernel.Round();
            }
            input.ReadMessage(nextRoundInfo_);
            break;
          }
          case 24: {
            CurrentAge = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Just used as parameter of consensus contract method.
  /// </summary>
  public sealed partial class ToPackage : pb::IMessage<ToPackage> {
    private static readonly pb::MessageParser<ToPackage> _parser = new pb::MessageParser<ToPackage>(() => new ToPackage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ToPackage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ConsensusReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ToPackage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ToPackage(ToPackage other) : this() {
      outValue_ = other.outValue_ != null ? other.outValue_.Clone() : null;
      signature_ = other.signature_ != null ? other.signature_.Clone() : null;
      roundId_ = other.roundId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ToPackage Clone() {
      return new ToPackage(this);
    }

    /// <summary>Field number for the "OutValue" field.</summary>
    public const int OutValueFieldNumber = 1;
    private global::AElf.Common.Hash outValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Hash OutValue {
      get { return outValue_; }
      set {
        outValue_ = value;
      }
    }

    /// <summary>Field number for the "Signature" field.</summary>
    public const int SignatureFieldNumber = 2;
    private global::AElf.Common.Hash signature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Hash Signature {
      get { return signature_; }
      set {
        signature_ = value;
      }
    }

    /// <summary>Field number for the "RoundId" field.</summary>
    public const int RoundIdFieldNumber = 3;
    private long roundId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoundId {
      get { return roundId_; }
      set {
        roundId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ToPackage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ToPackage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(OutValue, other.OutValue)) return false;
      if (!object.Equals(Signature, other.Signature)) return false;
      if (RoundId != other.RoundId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (outValue_ != null) hash ^= OutValue.GetHashCode();
      if (signature_ != null) hash ^= Signature.GetHashCode();
      if (RoundId != 0L) hash ^= RoundId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (outValue_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(OutValue);
      }
      if (signature_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Signature);
      }
      if (RoundId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(RoundId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (outValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OutValue);
      }
      if (signature_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Signature);
      }
      if (RoundId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoundId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ToPackage other) {
      if (other == null) {
        return;
      }
      if (other.outValue_ != null) {
        if (outValue_ == null) {
          outValue_ = new global::AElf.Common.Hash();
        }
        OutValue.MergeFrom(other.OutValue);
      }
      if (other.signature_ != null) {
        if (signature_ == null) {
          signature_ = new global::AElf.Common.Hash();
        }
        Signature.MergeFrom(other.Signature);
      }
      if (other.RoundId != 0L) {
        RoundId = other.RoundId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (outValue_ == null) {
              outValue_ = new global::AElf.Common.Hash();
            }
            input.ReadMessage(outValue_);
            break;
          }
          case 18: {
            if (signature_ == null) {
              signature_ = new global::AElf.Common.Hash();
            }
            input.ReadMessage(signature_);
            break;
          }
          case 24: {
            RoundId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Just used as parameter of consensus contract method.
  /// </summary>
  public sealed partial class ToBroadcast : pb::IMessage<ToBroadcast> {
    private static readonly pb::MessageParser<ToBroadcast> _parser = new pb::MessageParser<ToBroadcast>(() => new ToBroadcast());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ToBroadcast> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ConsensusReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ToBroadcast() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ToBroadcast(ToBroadcast other) : this() {
      inValue_ = other.inValue_ != null ? other.inValue_.Clone() : null;
      roundId_ = other.roundId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ToBroadcast Clone() {
      return new ToBroadcast(this);
    }

    /// <summary>Field number for the "InValue" field.</summary>
    public const int InValueFieldNumber = 1;
    private global::AElf.Common.Hash inValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Hash InValue {
      get { return inValue_; }
      set {
        inValue_ = value;
      }
    }

    /// <summary>Field number for the "RoundId" field.</summary>
    public const int RoundIdFieldNumber = 2;
    private long roundId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoundId {
      get { return roundId_; }
      set {
        roundId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ToBroadcast);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ToBroadcast other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(InValue, other.InValue)) return false;
      if (RoundId != other.RoundId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (inValue_ != null) hash ^= InValue.GetHashCode();
      if (RoundId != 0L) hash ^= RoundId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (inValue_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(InValue);
      }
      if (RoundId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RoundId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (inValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InValue);
      }
      if (RoundId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoundId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ToBroadcast other) {
      if (other == null) {
        return;
      }
      if (other.inValue_ != null) {
        if (inValue_ == null) {
          inValue_ = new global::AElf.Common.Hash();
        }
        InValue.MergeFrom(other.InValue);
      }
      if (other.RoundId != 0L) {
        RoundId = other.RoundId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (inValue_ == null) {
              inValue_ = new global::AElf.Common.Hash();
            }
            input.ReadMessage(inValue_);
            break;
          }
          case 16: {
            RoundId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Miners : pb::IMessage<Miners> {
    private static readonly pb::MessageParser<Miners> _parser = new pb::MessageParser<Miners>(() => new Miners());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Miners> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ConsensusReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Miners() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Miners(Miners other) : this() {
      termNumber_ = other.termNumber_;
      publicKeys_ = other.publicKeys_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Miners Clone() {
      return new Miners(this);
    }

    /// <summary>Field number for the "TermNumber" field.</summary>
    public const int TermNumberFieldNumber = 1;
    private ulong termNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TermNumber {
      get { return termNumber_; }
      set {
        termNumber_ = value;
      }
    }

    /// <summary>Field number for the "PublicKeys" field.</summary>
    public const int PublicKeysFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_publicKeys_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> publicKeys_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PublicKeys {
      get { return publicKeys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Miners);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Miners other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TermNumber != other.TermNumber) return false;
      if(!publicKeys_.Equals(other.publicKeys_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TermNumber != 0UL) hash ^= TermNumber.GetHashCode();
      hash ^= publicKeys_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TermNumber != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TermNumber);
      }
      publicKeys_.WriteTo(output, _repeated_publicKeys_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TermNumber != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TermNumber);
      }
      size += publicKeys_.CalculateSize(_repeated_publicKeys_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Miners other) {
      if (other == null) {
        return;
      }
      if (other.TermNumber != 0UL) {
        TermNumber = other.TermNumber;
      }
      publicKeys_.Add(other.publicKeys_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TermNumber = input.ReadUInt64();
            break;
          }
          case 18: {
            publicKeys_.AddEntriesFrom(input, _repeated_publicKeys_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TermNumberLookUp : pb::IMessage<TermNumberLookUp> {
    private static readonly pb::MessageParser<TermNumberLookUp> _parser = new pb::MessageParser<TermNumberLookUp>(() => new TermNumberLookUp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TermNumberLookUp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ConsensusReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TermNumberLookUp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TermNumberLookUp(TermNumberLookUp other) : this() {
      map_ = other.map_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TermNumberLookUp Clone() {
      return new TermNumberLookUp(this);
    }

    /// <summary>Field number for the "Map" field.</summary>
    public const int MapFieldNumber = 1;
    private static readonly pbc::MapField<ulong, ulong>.Codec _map_map_codec
        = new pbc::MapField<ulong, ulong>.Codec(pb::FieldCodec.ForUInt64(8), pb::FieldCodec.ForUInt64(16), 10);
    private readonly pbc::MapField<ulong, ulong> map_ = new pbc::MapField<ulong, ulong>();
    /// <summary>
    /// Term number -> Round number.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<ulong, ulong> Map {
      get { return map_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TermNumberLookUp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TermNumberLookUp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Map.Equals(other.Map)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Map.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      map_.WriteTo(output, _map_map_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += map_.CalculateSize(_map_map_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TermNumberLookUp other) {
      if (other == null) {
        return;
      }
      map_.Add(other.map_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            map_.AddEntriesFrom(input, _map_map_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Candidates : pb::IMessage<Candidates> {
    private static readonly pb::MessageParser<Candidates> _parser = new pb::MessageParser<Candidates>(() => new Candidates());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Candidates> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ConsensusReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Candidates() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Candidates(Candidates other) : this() {
      publicKeys_ = other.publicKeys_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Candidates Clone() {
      return new Candidates(this);
    }

    /// <summary>Field number for the "PublicKeys" field.</summary>
    public const int PublicKeysFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_publicKeys_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> publicKeys_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PublicKeys {
      get { return publicKeys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Candidates);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Candidates other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!publicKeys_.Equals(other.publicKeys_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= publicKeys_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      publicKeys_.WriteTo(output, _repeated_publicKeys_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += publicKeys_.CalculateSize(_repeated_publicKeys_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Candidates other) {
      if (other == null) {
        return;
      }
      publicKeys_.Add(other.publicKeys_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            publicKeys_.AddEntriesFrom(input, _repeated_publicKeys_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Tickets : pb::IMessage<Tickets> {
    private static readonly pb::MessageParser<Tickets> _parser = new pb::MessageParser<Tickets>(() => new Tickets());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Tickets> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ConsensusReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tickets() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tickets(Tickets other) : this() {
      votingRecords_ = other.votingRecords_.Clone();
      expiredTickets_ = other.expiredTickets_;
      totalTickets_ = other.totalTickets_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tickets Clone() {
      return new Tickets(this);
    }

    /// <summary>Field number for the "VotingRecords" field.</summary>
    public const int VotingRecordsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Kernel.VotingRecord> _repeated_votingRecords_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Kernel.VotingRecord.Parser);
    private readonly pbc::RepeatedField<global::AElf.Kernel.VotingRecord> votingRecords_ = new pbc::RepeatedField<global::AElf.Kernel.VotingRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Kernel.VotingRecord> VotingRecords {
      get { return votingRecords_; }
    }

    /// <summary>Field number for the "ExpiredTickets" field.</summary>
    public const int ExpiredTicketsFieldNumber = 2;
    private ulong expiredTickets_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ExpiredTickets {
      get { return expiredTickets_; }
      set {
        expiredTickets_ = value;
      }
    }

    /// <summary>Field number for the "TotalTickets" field.</summary>
    public const int TotalTicketsFieldNumber = 3;
    private ulong totalTickets_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TotalTickets {
      get { return totalTickets_; }
      set {
        totalTickets_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Tickets);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Tickets other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!votingRecords_.Equals(other.votingRecords_)) return false;
      if (ExpiredTickets != other.ExpiredTickets) return false;
      if (TotalTickets != other.TotalTickets) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= votingRecords_.GetHashCode();
      if (ExpiredTickets != 0UL) hash ^= ExpiredTickets.GetHashCode();
      if (TotalTickets != 0UL) hash ^= TotalTickets.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      votingRecords_.WriteTo(output, _repeated_votingRecords_codec);
      if (ExpiredTickets != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ExpiredTickets);
      }
      if (TotalTickets != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(TotalTickets);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += votingRecords_.CalculateSize(_repeated_votingRecords_codec);
      if (ExpiredTickets != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExpiredTickets);
      }
      if (TotalTickets != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalTickets);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Tickets other) {
      if (other == null) {
        return;
      }
      votingRecords_.Add(other.votingRecords_);
      if (other.ExpiredTickets != 0UL) {
        ExpiredTickets = other.ExpiredTickets;
      }
      if (other.TotalTickets != 0UL) {
        TotalTickets = other.TotalTickets;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            votingRecords_.AddEntriesFrom(input, _repeated_votingRecords_codec);
            break;
          }
          case 16: {
            ExpiredTickets = input.ReadUInt64();
            break;
          }
          case 24: {
            TotalTickets = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VotingRecord : pb::IMessage<VotingRecord> {
    private static readonly pb::MessageParser<VotingRecord> _parser = new pb::MessageParser<VotingRecord>(() => new VotingRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VotingRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ConsensusReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VotingRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VotingRecord(VotingRecord other) : this() {
      from_ = other.from_;
      to_ = other.to_;
      count_ = other.count_;
      roundNumber_ = other.roundNumber_;
      transactionId_ = other.transactionId_ != null ? other.transactionId_.Clone() : null;
      voteAge_ = other.voteAge_;
      lockDaysList_ = other.lockDaysList_.Clone();
      unlockAge_ = other.unlockAge_;
      termNumber_ = other.termNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VotingRecord Clone() {
      return new VotingRecord(this);
    }

    /// <summary>Field number for the "From" field.</summary>
    public const int FromFieldNumber = 1;
    private string from_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string From {
      get { return from_; }
      set {
        from_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "To" field.</summary>
    public const int ToFieldNumber = 2;
    private string to_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string To {
      get { return to_; }
      set {
        to_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Count" field.</summary>
    public const int CountFieldNumber = 3;
    private ulong count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "RoundNumber" field.</summary>
    public const int RoundNumberFieldNumber = 4;
    private ulong roundNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoundNumber {
      get { return roundNumber_; }
      set {
        roundNumber_ = value;
      }
    }

    /// <summary>Field number for the "TransactionId" field.</summary>
    public const int TransactionIdFieldNumber = 5;
    private global::AElf.Common.Hash transactionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Hash TransactionId {
      get { return transactionId_; }
      set {
        transactionId_ = value;
      }
    }

    /// <summary>Field number for the "VoteAge" field.</summary>
    public const int VoteAgeFieldNumber = 6;
    private ulong voteAge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VoteAge {
      get { return voteAge_; }
      set {
        voteAge_ = value;
      }
    }

    /// <summary>Field number for the "LockDaysList" field.</summary>
    public const int LockDaysListFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_lockDaysList_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> lockDaysList_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// Can be renewed by adding items.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> LockDaysList {
      get { return lockDaysList_; }
    }

    /// <summary>Field number for the "UnlockAge" field.</summary>
    public const int UnlockAgeFieldNumber = 8;
    private ulong unlockAge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UnlockAge {
      get { return unlockAge_; }
      set {
        unlockAge_ = value;
      }
    }

    /// <summary>Field number for the "TermNumber" field.</summary>
    public const int TermNumberFieldNumber = 9;
    private ulong termNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TermNumber {
      get { return termNumber_; }
      set {
        termNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VotingRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VotingRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (From != other.From) return false;
      if (To != other.To) return false;
      if (Count != other.Count) return false;
      if (RoundNumber != other.RoundNumber) return false;
      if (!object.Equals(TransactionId, other.TransactionId)) return false;
      if (VoteAge != other.VoteAge) return false;
      if(!lockDaysList_.Equals(other.lockDaysList_)) return false;
      if (UnlockAge != other.UnlockAge) return false;
      if (TermNumber != other.TermNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (From.Length != 0) hash ^= From.GetHashCode();
      if (To.Length != 0) hash ^= To.GetHashCode();
      if (Count != 0UL) hash ^= Count.GetHashCode();
      if (RoundNumber != 0UL) hash ^= RoundNumber.GetHashCode();
      if (transactionId_ != null) hash ^= TransactionId.GetHashCode();
      if (VoteAge != 0UL) hash ^= VoteAge.GetHashCode();
      hash ^= lockDaysList_.GetHashCode();
      if (UnlockAge != 0UL) hash ^= UnlockAge.GetHashCode();
      if (TermNumber != 0UL) hash ^= TermNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (From.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(From);
      }
      if (To.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(To);
      }
      if (Count != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Count);
      }
      if (RoundNumber != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RoundNumber);
      }
      if (transactionId_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TransactionId);
      }
      if (VoteAge != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(VoteAge);
      }
      lockDaysList_.WriteTo(output, _repeated_lockDaysList_codec);
      if (UnlockAge != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(UnlockAge);
      }
      if (TermNumber != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(TermNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (From.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(From);
      }
      if (To.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(To);
      }
      if (Count != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Count);
      }
      if (RoundNumber != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoundNumber);
      }
      if (transactionId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TransactionId);
      }
      if (VoteAge != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VoteAge);
      }
      size += lockDaysList_.CalculateSize(_repeated_lockDaysList_codec);
      if (UnlockAge != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UnlockAge);
      }
      if (TermNumber != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TermNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VotingRecord other) {
      if (other == null) {
        return;
      }
      if (other.From.Length != 0) {
        From = other.From;
      }
      if (other.To.Length != 0) {
        To = other.To;
      }
      if (other.Count != 0UL) {
        Count = other.Count;
      }
      if (other.RoundNumber != 0UL) {
        RoundNumber = other.RoundNumber;
      }
      if (other.transactionId_ != null) {
        if (transactionId_ == null) {
          transactionId_ = new global::AElf.Common.Hash();
        }
        TransactionId.MergeFrom(other.TransactionId);
      }
      if (other.VoteAge != 0UL) {
        VoteAge = other.VoteAge;
      }
      lockDaysList_.Add(other.lockDaysList_);
      if (other.UnlockAge != 0UL) {
        UnlockAge = other.UnlockAge;
      }
      if (other.TermNumber != 0UL) {
        TermNumber = other.TermNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            From = input.ReadString();
            break;
          }
          case 18: {
            To = input.ReadString();
            break;
          }
          case 24: {
            Count = input.ReadUInt64();
            break;
          }
          case 32: {
            RoundNumber = input.ReadUInt64();
            break;
          }
          case 42: {
            if (transactionId_ == null) {
              transactionId_ = new global::AElf.Common.Hash();
            }
            input.ReadMessage(transactionId_);
            break;
          }
          case 48: {
            VoteAge = input.ReadUInt64();
            break;
          }
          case 58:
          case 56: {
            lockDaysList_.AddEntriesFrom(input, _repeated_lockDaysList_codec);
            break;
          }
          case 64: {
            UnlockAge = input.ReadUInt64();
            break;
          }
          case 72: {
            TermNumber = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TermSnapshot : pb::IMessage<TermSnapshot> {
    private static readonly pb::MessageParser<TermSnapshot> _parser = new pb::MessageParser<TermSnapshot>(() => new TermSnapshot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TermSnapshot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ConsensusReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TermSnapshot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TermSnapshot(TermSnapshot other) : this() {
      endRoundNumber_ = other.endRoundNumber_;
      totalBlocks_ = other.totalBlocks_;
      candidatesSnapshot_ = other.candidatesSnapshot_.Clone();
      termNumber_ = other.termNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TermSnapshot Clone() {
      return new TermSnapshot(this);
    }

    /// <summary>Field number for the "EndRoundNumber" field.</summary>
    public const int EndRoundNumberFieldNumber = 1;
    private ulong endRoundNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EndRoundNumber {
      get { return endRoundNumber_; }
      set {
        endRoundNumber_ = value;
      }
    }

    /// <summary>Field number for the "TotalBlocks" field.</summary>
    public const int TotalBlocksFieldNumber = 2;
    private ulong totalBlocks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TotalBlocks {
      get { return totalBlocks_; }
      set {
        totalBlocks_ = value;
      }
    }

    /// <summary>Field number for the "CandidatesSnapshot" field.</summary>
    public const int CandidatesSnapshotFieldNumber = 3;
    private static readonly pb::FieldCodec<global::AElf.Kernel.CandidateInTerm> _repeated_candidatesSnapshot_codec
        = pb::FieldCodec.ForMessage(26, global::AElf.Kernel.CandidateInTerm.Parser);
    private readonly pbc::RepeatedField<global::AElf.Kernel.CandidateInTerm> candidatesSnapshot_ = new pbc::RepeatedField<global::AElf.Kernel.CandidateInTerm>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Kernel.CandidateInTerm> CandidatesSnapshot {
      get { return candidatesSnapshot_; }
    }

    /// <summary>Field number for the "TermNumber" field.</summary>
    public const int TermNumberFieldNumber = 4;
    private ulong termNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TermNumber {
      get { return termNumber_; }
      set {
        termNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TermSnapshot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TermSnapshot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EndRoundNumber != other.EndRoundNumber) return false;
      if (TotalBlocks != other.TotalBlocks) return false;
      if(!candidatesSnapshot_.Equals(other.candidatesSnapshot_)) return false;
      if (TermNumber != other.TermNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EndRoundNumber != 0UL) hash ^= EndRoundNumber.GetHashCode();
      if (TotalBlocks != 0UL) hash ^= TotalBlocks.GetHashCode();
      hash ^= candidatesSnapshot_.GetHashCode();
      if (TermNumber != 0UL) hash ^= TermNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EndRoundNumber != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(EndRoundNumber);
      }
      if (TotalBlocks != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TotalBlocks);
      }
      candidatesSnapshot_.WriteTo(output, _repeated_candidatesSnapshot_codec);
      if (TermNumber != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(TermNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EndRoundNumber != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EndRoundNumber);
      }
      if (TotalBlocks != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalBlocks);
      }
      size += candidatesSnapshot_.CalculateSize(_repeated_candidatesSnapshot_codec);
      if (TermNumber != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TermNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TermSnapshot other) {
      if (other == null) {
        return;
      }
      if (other.EndRoundNumber != 0UL) {
        EndRoundNumber = other.EndRoundNumber;
      }
      if (other.TotalBlocks != 0UL) {
        TotalBlocks = other.TotalBlocks;
      }
      candidatesSnapshot_.Add(other.candidatesSnapshot_);
      if (other.TermNumber != 0UL) {
        TermNumber = other.TermNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EndRoundNumber = input.ReadUInt64();
            break;
          }
          case 16: {
            TotalBlocks = input.ReadUInt64();
            break;
          }
          case 26: {
            candidatesSnapshot_.AddEntriesFrom(input, _repeated_candidatesSnapshot_codec);
            break;
          }
          case 32: {
            TermNumber = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Round : pb::IMessage<Round> {
    private static readonly pb::MessageParser<Round> _parser = new pb::MessageParser<Round>(() => new Round());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Round> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ConsensusReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Round() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Round(Round other) : this() {
      roundNumber_ = other.roundNumber_;
      realTimeMinersInfo_ = other.realTimeMinersInfo_.Clone();
      miningInterval_ = other.miningInterval_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Round Clone() {
      return new Round(this);
    }

    /// <summary>Field number for the "RoundNumber" field.</summary>
    public const int RoundNumberFieldNumber = 1;
    private ulong roundNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoundNumber {
      get { return roundNumber_; }
      set {
        roundNumber_ = value;
      }
    }

    /// <summary>Field number for the "RealTimeMinersInfo" field.</summary>
    public const int RealTimeMinersInfoFieldNumber = 2;
    private static readonly pbc::MapField<string, global::AElf.Kernel.MinerInRound>.Codec _map_realTimeMinersInfo_codec
        = new pbc::MapField<string, global::AElf.Kernel.MinerInRound>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::AElf.Kernel.MinerInRound.Parser), 18);
    private readonly pbc::MapField<string, global::AElf.Kernel.MinerInRound> realTimeMinersInfo_ = new pbc::MapField<string, global::AElf.Kernel.MinerInRound>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::AElf.Kernel.MinerInRound> RealTimeMinersInfo {
      get { return realTimeMinersInfo_; }
    }

    /// <summary>Field number for the "MiningInterval" field.</summary>
    public const int MiningIntervalFieldNumber = 3;
    private int miningInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MiningInterval {
      get { return miningInterval_; }
      set {
        miningInterval_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Round);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Round other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoundNumber != other.RoundNumber) return false;
      if (!RealTimeMinersInfo.Equals(other.RealTimeMinersInfo)) return false;
      if (MiningInterval != other.MiningInterval) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoundNumber != 0UL) hash ^= RoundNumber.GetHashCode();
      hash ^= RealTimeMinersInfo.GetHashCode();
      if (MiningInterval != 0) hash ^= MiningInterval.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoundNumber != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoundNumber);
      }
      realTimeMinersInfo_.WriteTo(output, _map_realTimeMinersInfo_codec);
      if (MiningInterval != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MiningInterval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoundNumber != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoundNumber);
      }
      size += realTimeMinersInfo_.CalculateSize(_map_realTimeMinersInfo_codec);
      if (MiningInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MiningInterval);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Round other) {
      if (other == null) {
        return;
      }
      if (other.RoundNumber != 0UL) {
        RoundNumber = other.RoundNumber;
      }
      realTimeMinersInfo_.Add(other.realTimeMinersInfo_);
      if (other.MiningInterval != 0) {
        MiningInterval = other.MiningInterval;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoundNumber = input.ReadUInt64();
            break;
          }
          case 18: {
            realTimeMinersInfo_.AddEntriesFrom(input, _map_realTimeMinersInfo_codec);
            break;
          }
          case 24: {
            MiningInterval = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CandidateInTerm : pb::IMessage<CandidateInTerm> {
    private static readonly pb::MessageParser<CandidateInTerm> _parser = new pb::MessageParser<CandidateInTerm>(() => new CandidateInTerm());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CandidateInTerm> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ConsensusReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CandidateInTerm() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CandidateInTerm(CandidateInTerm other) : this() {
      publicKey_ = other.publicKey_;
      votes_ = other.votes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CandidateInTerm Clone() {
      return new CandidateInTerm(this);
    }

    /// <summary>Field number for the "PublicKey" field.</summary>
    public const int PublicKeyFieldNumber = 1;
    private string publicKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Votes" field.</summary>
    public const int VotesFieldNumber = 2;
    private ulong votes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Votes {
      get { return votes_; }
      set {
        votes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CandidateInTerm);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CandidateInTerm other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PublicKey != other.PublicKey) return false;
      if (Votes != other.Votes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (Votes != 0UL) hash ^= Votes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PublicKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PublicKey);
      }
      if (Votes != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Votes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PublicKey);
      }
      if (Votes != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Votes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CandidateInTerm other) {
      if (other == null) {
        return;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      if (other.Votes != 0UL) {
        Votes = other.Votes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PublicKey = input.ReadString();
            break;
          }
          case 16: {
            Votes = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MinerInRound : pb::IMessage<MinerInRound> {
    private static readonly pb::MessageParser<MinerInRound> _parser = new pb::MessageParser<MinerInRound>(() => new MinerInRound());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MinerInRound> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ConsensusReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MinerInRound() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MinerInRound(MinerInRound other) : this() {
      order_ = other.order_;
      isExtraBlockProducer_ = other.isExtraBlockProducer_;
      inValue_ = other.inValue_ != null ? other.inValue_.Clone() : null;
      outValue_ = other.outValue_ != null ? other.outValue_.Clone() : null;
      signature_ = other.signature_ != null ? other.signature_.Clone() : null;
      expectedMiningTime_ = other.expectedMiningTime_ != null ? other.expectedMiningTime_.Clone() : null;
      producedBlocks_ = other.producedBlocks_;
      isForked_ = other.isForked_;
      missedTimeSlots_ = other.missedTimeSlots_;
      roundNumber_ = other.roundNumber_;
      publicKey_ = other.publicKey_;
      packagedTxsCount_ = other.packagedTxsCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MinerInRound Clone() {
      return new MinerInRound(this);
    }

    /// <summary>Field number for the "Order" field.</summary>
    public const int OrderFieldNumber = 1;
    private int order_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Order {
      get { return order_; }
      set {
        order_ = value;
      }
    }

    /// <summary>Field number for the "IsExtraBlockProducer" field.</summary>
    public const int IsExtraBlockProducerFieldNumber = 2;
    private bool isExtraBlockProducer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsExtraBlockProducer {
      get { return isExtraBlockProducer_; }
      set {
        isExtraBlockProducer_ = value;
      }
    }

    /// <summary>Field number for the "InValue" field.</summary>
    public const int InValueFieldNumber = 3;
    private global::AElf.Common.Hash inValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Hash InValue {
      get { return inValue_; }
      set {
        inValue_ = value;
      }
    }

    /// <summary>Field number for the "OutValue" field.</summary>
    public const int OutValueFieldNumber = 4;
    private global::AElf.Common.Hash outValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Hash OutValue {
      get { return outValue_; }
      set {
        outValue_ = value;
      }
    }

    /// <summary>Field number for the "Signature" field.</summary>
    public const int SignatureFieldNumber = 5;
    private global::AElf.Common.Hash signature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Hash Signature {
      get { return signature_; }
      set {
        signature_ = value;
      }
    }

    /// <summary>Field number for the "ExpectedMiningTime" field.</summary>
    public const int ExpectedMiningTimeFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp expectedMiningTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ExpectedMiningTime {
      get { return expectedMiningTime_; }
      set {
        expectedMiningTime_ = value;
      }
    }

    /// <summary>Field number for the "ProducedBlocks" field.</summary>
    public const int ProducedBlocksFieldNumber = 7;
    private ulong producedBlocks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ProducedBlocks {
      get { return producedBlocks_; }
      set {
        producedBlocks_ = value;
      }
    }

    /// <summary>Field number for the "IsForked" field.</summary>
    public const int IsForkedFieldNumber = 8;
    private bool isForked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsForked {
      get { return isForked_; }
      set {
        isForked_ = value;
      }
    }

    /// <summary>Field number for the "MissedTimeSlots" field.</summary>
    public const int MissedTimeSlotsFieldNumber = 9;
    private ulong missedTimeSlots_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MissedTimeSlots {
      get { return missedTimeSlots_; }
      set {
        missedTimeSlots_ = value;
      }
    }

    /// <summary>Field number for the "RoundNumber" field.</summary>
    public const int RoundNumberFieldNumber = 10;
    private ulong roundNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoundNumber {
      get { return roundNumber_; }
      set {
        roundNumber_ = value;
      }
    }

    /// <summary>Field number for the "PublicKey" field.</summary>
    public const int PublicKeyFieldNumber = 11;
    private string publicKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PackagedTxsCount" field.</summary>
    public const int PackagedTxsCountFieldNumber = 12;
    private ulong packagedTxsCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PackagedTxsCount {
      get { return packagedTxsCount_; }
      set {
        packagedTxsCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MinerInRound);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MinerInRound other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Order != other.Order) return false;
      if (IsExtraBlockProducer != other.IsExtraBlockProducer) return false;
      if (!object.Equals(InValue, other.InValue)) return false;
      if (!object.Equals(OutValue, other.OutValue)) return false;
      if (!object.Equals(Signature, other.Signature)) return false;
      if (!object.Equals(ExpectedMiningTime, other.ExpectedMiningTime)) return false;
      if (ProducedBlocks != other.ProducedBlocks) return false;
      if (IsForked != other.IsForked) return false;
      if (MissedTimeSlots != other.MissedTimeSlots) return false;
      if (RoundNumber != other.RoundNumber) return false;
      if (PublicKey != other.PublicKey) return false;
      if (PackagedTxsCount != other.PackagedTxsCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Order != 0) hash ^= Order.GetHashCode();
      if (IsExtraBlockProducer != false) hash ^= IsExtraBlockProducer.GetHashCode();
      if (inValue_ != null) hash ^= InValue.GetHashCode();
      if (outValue_ != null) hash ^= OutValue.GetHashCode();
      if (signature_ != null) hash ^= Signature.GetHashCode();
      if (expectedMiningTime_ != null) hash ^= ExpectedMiningTime.GetHashCode();
      if (ProducedBlocks != 0UL) hash ^= ProducedBlocks.GetHashCode();
      if (IsForked != false) hash ^= IsForked.GetHashCode();
      if (MissedTimeSlots != 0UL) hash ^= MissedTimeSlots.GetHashCode();
      if (RoundNumber != 0UL) hash ^= RoundNumber.GetHashCode();
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (PackagedTxsCount != 0UL) hash ^= PackagedTxsCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Order != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Order);
      }
      if (IsExtraBlockProducer != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsExtraBlockProducer);
      }
      if (inValue_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(InValue);
      }
      if (outValue_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(OutValue);
      }
      if (signature_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Signature);
      }
      if (expectedMiningTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ExpectedMiningTime);
      }
      if (ProducedBlocks != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(ProducedBlocks);
      }
      if (IsForked != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsForked);
      }
      if (MissedTimeSlots != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(MissedTimeSlots);
      }
      if (RoundNumber != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(RoundNumber);
      }
      if (PublicKey.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(PublicKey);
      }
      if (PackagedTxsCount != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(PackagedTxsCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Order != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Order);
      }
      if (IsExtraBlockProducer != false) {
        size += 1 + 1;
      }
      if (inValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InValue);
      }
      if (outValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OutValue);
      }
      if (signature_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Signature);
      }
      if (expectedMiningTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExpectedMiningTime);
      }
      if (ProducedBlocks != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ProducedBlocks);
      }
      if (IsForked != false) {
        size += 1 + 1;
      }
      if (MissedTimeSlots != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MissedTimeSlots);
      }
      if (RoundNumber != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoundNumber);
      }
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PublicKey);
      }
      if (PackagedTxsCount != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PackagedTxsCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MinerInRound other) {
      if (other == null) {
        return;
      }
      if (other.Order != 0) {
        Order = other.Order;
      }
      if (other.IsExtraBlockProducer != false) {
        IsExtraBlockProducer = other.IsExtraBlockProducer;
      }
      if (other.inValue_ != null) {
        if (inValue_ == null) {
          inValue_ = new global::AElf.Common.Hash();
        }
        InValue.MergeFrom(other.InValue);
      }
      if (other.outValue_ != null) {
        if (outValue_ == null) {
          outValue_ = new global::AElf.Common.Hash();
        }
        OutValue.MergeFrom(other.OutValue);
      }
      if (other.signature_ != null) {
        if (signature_ == null) {
          signature_ = new global::AElf.Common.Hash();
        }
        Signature.MergeFrom(other.Signature);
      }
      if (other.expectedMiningTime_ != null) {
        if (expectedMiningTime_ == null) {
          expectedMiningTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ExpectedMiningTime.MergeFrom(other.ExpectedMiningTime);
      }
      if (other.ProducedBlocks != 0UL) {
        ProducedBlocks = other.ProducedBlocks;
      }
      if (other.IsForked != false) {
        IsForked = other.IsForked;
      }
      if (other.MissedTimeSlots != 0UL) {
        MissedTimeSlots = other.MissedTimeSlots;
      }
      if (other.RoundNumber != 0UL) {
        RoundNumber = other.RoundNumber;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      if (other.PackagedTxsCount != 0UL) {
        PackagedTxsCount = other.PackagedTxsCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Order = input.ReadInt32();
            break;
          }
          case 16: {
            IsExtraBlockProducer = input.ReadBool();
            break;
          }
          case 26: {
            if (inValue_ == null) {
              inValue_ = new global::AElf.Common.Hash();
            }
            input.ReadMessage(inValue_);
            break;
          }
          case 34: {
            if (outValue_ == null) {
              outValue_ = new global::AElf.Common.Hash();
            }
            input.ReadMessage(outValue_);
            break;
          }
          case 42: {
            if (signature_ == null) {
              signature_ = new global::AElf.Common.Hash();
            }
            input.ReadMessage(signature_);
            break;
          }
          case 50: {
            if (expectedMiningTime_ == null) {
              expectedMiningTime_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(expectedMiningTime_);
            break;
          }
          case 56: {
            ProducedBlocks = input.ReadUInt64();
            break;
          }
          case 64: {
            IsForked = input.ReadBool();
            break;
          }
          case 72: {
            MissedTimeSlots = input.ReadUInt64();
            break;
          }
          case 80: {
            RoundNumber = input.ReadUInt64();
            break;
          }
          case 90: {
            PublicKey = input.ReadString();
            break;
          }
          case 96: {
            PackagedTxsCount = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CandidateInHistory : pb::IMessage<CandidateInHistory> {
    private static readonly pb::MessageParser<CandidateInHistory> _parser = new pb::MessageParser<CandidateInHistory>(() => new CandidateInHistory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CandidateInHistory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ConsensusReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CandidateInHistory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CandidateInHistory(CandidateInHistory other) : this() {
      terms_ = other.terms_.Clone();
      producedBlocks_ = other.producedBlocks_;
      missedTimeSlots_ = other.missedTimeSlots_;
      continualAppointmentCount_ = other.continualAppointmentCount_;
      reappointmentCount_ = other.reappointmentCount_;
      aliases_ = other.aliases_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CandidateInHistory Clone() {
      return new CandidateInHistory(this);
    }

    /// <summary>Field number for the "Terms" field.</summary>
    public const int TermsFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_terms_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> terms_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Terms {
      get { return terms_; }
    }

    /// <summary>Field number for the "ProducedBlocks" field.</summary>
    public const int ProducedBlocksFieldNumber = 2;
    private ulong producedBlocks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ProducedBlocks {
      get { return producedBlocks_; }
      set {
        producedBlocks_ = value;
      }
    }

    /// <summary>Field number for the "MissedTimeSlots" field.</summary>
    public const int MissedTimeSlotsFieldNumber = 3;
    private ulong missedTimeSlots_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MissedTimeSlots {
      get { return missedTimeSlots_; }
      set {
        missedTimeSlots_ = value;
      }
    }

    /// <summary>Field number for the "ContinualAppointmentCount" field.</summary>
    public const int ContinualAppointmentCountFieldNumber = 4;
    private ulong continualAppointmentCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ContinualAppointmentCount {
      get { return continualAppointmentCount_; }
      set {
        continualAppointmentCount_ = value;
      }
    }

    /// <summary>Field number for the "ReappointmentCount" field.</summary>
    public const int ReappointmentCountFieldNumber = 5;
    private ulong reappointmentCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ReappointmentCount {
      get { return reappointmentCount_; }
      set {
        reappointmentCount_ = value;
      }
    }

    /// <summary>Field number for the "Aliases" field.</summary>
    public const int AliasesFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_aliases_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> aliases_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Aliases {
      get { return aliases_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CandidateInHistory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CandidateInHistory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!terms_.Equals(other.terms_)) return false;
      if (ProducedBlocks != other.ProducedBlocks) return false;
      if (MissedTimeSlots != other.MissedTimeSlots) return false;
      if (ContinualAppointmentCount != other.ContinualAppointmentCount) return false;
      if (ReappointmentCount != other.ReappointmentCount) return false;
      if(!aliases_.Equals(other.aliases_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= terms_.GetHashCode();
      if (ProducedBlocks != 0UL) hash ^= ProducedBlocks.GetHashCode();
      if (MissedTimeSlots != 0UL) hash ^= MissedTimeSlots.GetHashCode();
      if (ContinualAppointmentCount != 0UL) hash ^= ContinualAppointmentCount.GetHashCode();
      if (ReappointmentCount != 0UL) hash ^= ReappointmentCount.GetHashCode();
      hash ^= aliases_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      terms_.WriteTo(output, _repeated_terms_codec);
      if (ProducedBlocks != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ProducedBlocks);
      }
      if (MissedTimeSlots != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(MissedTimeSlots);
      }
      if (ContinualAppointmentCount != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(ContinualAppointmentCount);
      }
      if (ReappointmentCount != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(ReappointmentCount);
      }
      aliases_.WriteTo(output, _repeated_aliases_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += terms_.CalculateSize(_repeated_terms_codec);
      if (ProducedBlocks != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ProducedBlocks);
      }
      if (MissedTimeSlots != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MissedTimeSlots);
      }
      if (ContinualAppointmentCount != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ContinualAppointmentCount);
      }
      if (ReappointmentCount != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ReappointmentCount);
      }
      size += aliases_.CalculateSize(_repeated_aliases_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CandidateInHistory other) {
      if (other == null) {
        return;
      }
      terms_.Add(other.terms_);
      if (other.ProducedBlocks != 0UL) {
        ProducedBlocks = other.ProducedBlocks;
      }
      if (other.MissedTimeSlots != 0UL) {
        MissedTimeSlots = other.MissedTimeSlots;
      }
      if (other.ContinualAppointmentCount != 0UL) {
        ContinualAppointmentCount = other.ContinualAppointmentCount;
      }
      if (other.ReappointmentCount != 0UL) {
        ReappointmentCount = other.ReappointmentCount;
      }
      aliases_.Add(other.aliases_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            terms_.AddEntriesFrom(input, _repeated_terms_codec);
            break;
          }
          case 16: {
            ProducedBlocks = input.ReadUInt64();
            break;
          }
          case 24: {
            MissedTimeSlots = input.ReadUInt64();
            break;
          }
          case 32: {
            ContinualAppointmentCount = input.ReadUInt64();
            break;
          }
          case 40: {
            ReappointmentCount = input.ReadUInt64();
            break;
          }
          case 50: {
            aliases_.AddEntriesFrom(input, _repeated_aliases_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TicketsDictionary : pb::IMessage<TicketsDictionary> {
    private static readonly pb::MessageParser<TicketsDictionary> _parser = new pb::MessageParser<TicketsDictionary>(() => new TicketsDictionary());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TicketsDictionary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ConsensusReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketsDictionary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketsDictionary(TicketsDictionary other) : this() {
      maps_ = other.maps_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketsDictionary Clone() {
      return new TicketsDictionary(this);
    }

    /// <summary>Field number for the "Maps" field.</summary>
    public const int MapsFieldNumber = 1;
    private static readonly pbc::MapField<string, global::AElf.Kernel.Tickets>.Codec _map_maps_codec
        = new pbc::MapField<string, global::AElf.Kernel.Tickets>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::AElf.Kernel.Tickets.Parser), 10);
    private readonly pbc::MapField<string, global::AElf.Kernel.Tickets> maps_ = new pbc::MapField<string, global::AElf.Kernel.Tickets>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::AElf.Kernel.Tickets> Maps {
      get { return maps_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TicketsDictionary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TicketsDictionary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Maps.Equals(other.Maps)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Maps.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      maps_.WriteTo(output, _map_maps_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += maps_.CalculateSize(_map_maps_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TicketsDictionary other) {
      if (other == null) {
        return;
      }
      maps_.Add(other.maps_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            maps_.AddEntriesFrom(input, _map_maps_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
