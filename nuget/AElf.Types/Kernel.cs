// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: kernel.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AElf.Kernel {

  /// <summary>Holder for reflection information generated from kernel.proto</summary>
  public static partial class KernelReflection {

    #region Descriptor
    /// <summary>File descriptor for kernel.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static KernelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxrZXJuZWwucHJvdG8aH2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJv",
            "dG8aDGNvbW1vbi5wcm90bxoQY3Jvc3NjaGFpbi5wcm90byKJAgoLVHJhbnNh",
            "Y3Rpb24SFgoERnJvbRgBIAEoCzIILkFkZHJlc3MSFAoCVG8YAiABKAsyCC5B",
            "ZGRyZXNzEhYKDlJlZkJsb2NrTnVtYmVyGAMgASgEEhYKDlJlZkJsb2NrUHJl",
            "Zml4GAQgASgMEhMKC0luY3JlbWVudElkGAUgASgEEhIKCk1ldGhvZE5hbWUY",
            "BiABKAkSDgoGUGFyYW1zGAcgASgMEgsKA0ZlZRgIIAEoBBIMCgRTaWdzGAkg",
            "AygMEh4KBFR5cGUYCiABKA4yEC5UcmFuc2FjdGlvblR5cGUSKAoEVGltZRgL",
            "IAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAikgUKElRyYW5zYWN0",
            "aW9uUmVjZWlwdBIcCg1UcmFuc2FjdGlvbklkGAEgASgLMgUuSGFzaBIhCgtU",
            "cmFuc2FjdGlvbhgCIAEoCzIMLlRyYW5zYWN0aW9uEjgKC1NpZ25hdHVyZVN0",
            "GAMgASgOMiMuVHJhbnNhY3Rpb25SZWNlaXB0LlNpZ25hdHVyZVN0YXR1cxI2",
            "CgpSZWZCbG9ja1N0GAQgASgOMiIuVHJhbnNhY3Rpb25SZWNlaXB0LlJlZkJs",
            "b2NrU3RhdHVzEjUKBlN0YXR1cxgFIAEoDjIlLlRyYW5zYWN0aW9uUmVjZWlw",
            "dC5UcmFuc2FjdGlvblN0YXR1cxITCgtJc1N5c3RlbVR4bhgGIAEoCBIbChNF",
            "eGVjdXRlZEJsb2NrTnVtYmVyGAcgASgEImQKEVRyYW5zYWN0aW9uU3RhdHVz",
            "EhwKGFVua25vd25UcmFuc2FjdGlvblN0YXR1cxAAEhgKFFRyYW5zYWN0aW9u",
            "RXhlY3V0aW5nEAESFwoTVHJhbnNhY3Rpb25FeGVjdXRlZBACImAKD1NpZ25h",
            "dHVyZVN0YXR1cxIaChZVbmtub3duU2lnbmF0dXJlU3RhdHVzEAASEgoOU2ln",
            "bmF0dXJlVmFsaWQQARIdChBTaWduYXR1cmVJbnZhbGlkEP///////////wEi",
            "lwEKDlJlZkJsb2NrU3RhdHVzEhkKFVVua25vd25SZWZCbG9ja1N0YXR1cxAA",
            "EhEKDVJlZkJsb2NrVmFsaWQQARIcCg9SZWZCbG9ja0ludmFsaWQQ////////",
            "////ARIcCg9SZWZCbG9ja0V4cGlyZWQQ/v//////////ARIbCg5GdXR1cmVS",
            "ZWZCbG9jaxD9//////////8BIhkKCVN0YXRlUGF0aBIMCgRQYXRoGAEgAygM",
            "IjkKClN0YXRlVmFsdWUSFAoMQ3VycmVudFZhbHVlGAEgASgMEhUKDU9yaWdp",
            "bmFsVmFsdWUYAiABKAwiTQoLU3RhdGVDaGFuZ2USHQoJU3RhdGVQYXRoGAEg",
            "ASgLMgouU3RhdGVQYXRoEh8KClN0YXRlVmFsdWUYAiABKAsyCy5TdGF0ZVZh",
            "bHVlIjUKD1RyYW5zYWN0aW9uTGlzdBIiCgxUcmFuc2FjdGlvbnMYASADKAsy",
            "DC5UcmFuc2FjdGlvbiL4AQoRVHJhbnNhY3Rpb25SZXN1bHQSHAoNVHJhbnNh",
            "Y3Rpb25JZBgBIAEoCzIFLkhhc2gSFwoGU3RhdHVzGAIgASgOMgcuU3RhdHVz",
            "EhcKBExvZ3MYAyADKAsyCS5Mb2dFdmVudBINCgVCbG9vbRgEIAEoDBIOCgZS",
            "ZXRWYWwYBSABKAwSEwoLQmxvY2tOdW1iZXIYBiABKAQSGAoJQmxvY2tIYXNo",
            "GAcgASgLMgUuSGFzaBINCgVJbmRleBgIIAEoBRIYCglTdGF0ZUhhc2gYCSAB",
            "KAsyBS5IYXNoEhwKDURlZmVycmVkVHhuSWQYCiABKAsyBS5IYXNoIuwCChBU",
            "cmFuc2FjdGlvblRyYWNlEhwKDVRyYW5zYWN0aW9uSWQYASABKAsyBS5IYXNo",
            "EhcKBlJldFZhbBgCIAEoCzIHLlJldFZhbBIOCgZTdGRPdXQYAyABKAkSDgoG",
            "U3RkRXJyGAQgASgJEhgKCVN0YXRlSGFzaBgFIAEoCzIFLkhhc2gSFwoETG9n",
            "cxgGIAMoCzIJLkxvZ0V2ZW50EigKEklubGluZVRyYW5zYWN0aW9ucxgHIAMo",
            "CzIMLlRyYW5zYWN0aW9uEicKDElubGluZVRyYWNlcxgIIAMoCzIRLlRyYW5z",
            "YWN0aW9uVHJhY2USIgoMU3RhdGVDaGFuZ2VzGAkgAygLMgwuU3RhdGVDaGFu",
            "Z2USDwoHRWxhcHNlZBgKIAEoAxIpCg9FeGVjdXRpb25TdGF0dXMYCyABKA4y",
            "EC5FeGVjdXRpb25TdGF0dXMSGwoTRGVmZXJyZWRUcmFuc2FjdGlvbhgMIAEo",
            "DCJDCghMb2dFdmVudBIZCgdBZGRyZXNzGAEgASgLMgguQWRkcmVzcxIOCgZU",
            "b3BpY3MYAiADKAwSDAoERGF0YRgDIAEoDCK2AQoGUmV0VmFsEh0KBFR5cGUY",
            "ASABKA4yDy5SZXRWYWwuUmV0VHlwZRIMCgREYXRhGAIgASgMIn8KB1JldFR5",
            "cGUSCAoEVm9pZBAAEggKBEJvb2wQARIJCgVJbnQzMhACEgoKBlVJbnQzMhAD",
            "EgkKBUludDY0EAQSCgoGVUludDY0EAUSCgoGU3RyaW5nEAYSCQoFQnl0ZXMQ",
            "BxINCglQYk1lc3NhZ2UQCBIMCghVc2VyVHlwZRAJIjAKD0Jsb2NrSGVhZGVy",
            "TGlzdBIdCgdIZWFkZXJzGAEgAygLMgwuQmxvY2tIZWFkZXIiugIKC0Jsb2Nr",
            "SGVhZGVyEg8KB1ZlcnNpb24YASABKAUSIAoRUHJldmlvdXNCbG9ja0hhc2gY",
            "AiABKAsyBS5IYXNoEisKHE1lcmtsZVRyZWVSb290T2ZUcmFuc2FjdGlvbnMY",
            "AyABKAsyBS5IYXNoEikKGk1lcmtsZVRyZWVSb290T2ZXb3JsZFN0YXRlGAQg",
            "ASgLMgUuSGFzaBINCgVCbG9vbRgFIAEoDBINCgVJbmRleBgGIAEoBBILCgNT",
            "aWcYByABKAwSCQoBUBgIIAEoDBIoCgRUaW1lGAkgASgLMhouZ29vZ2xlLnBy",
            "b3RvYnVmLlRpbWVzdGFtcBIWCgdDaGFpbklkGAogASgLMgUuSGFzaBIoChlT",
            "aWRlQ2hhaW5UcmFuc2FjdGlvbnNSb290GAsgASgLMgUuSGFzaCKVAQoJQmxv",
            "Y2tCb2R5EhoKC0Jsb2NrSGVhZGVyGAEgASgLMgUuSGFzaBIbCgxUcmFuc2Fj",
            "dGlvbnMYAiADKAsyBS5IYXNoEiUKD1RyYW5zYWN0aW9uTGlzdBgDIAMoCzIM",
            "LlRyYW5zYWN0aW9uEigKC0luZGV4ZWRJbmZvGAQgAygLMhMuU2lkZUNoYWlu",
            "QmxvY2tJbmZvIj8KBUJsb2NrEhwKBkhlYWRlchgBIAEoCzIMLkJsb2NrSGVh",
            "ZGVyEhgKBEJvZHkYAiABKAsyCi5CbG9ja0JvZHkidwoZU21hcnRDb250cmFj",
            "dFJlZ2lzdHJhdGlvbhIQCghDYXRlZ29yeRgBIAEoBRIbCgxDb250cmFjdEhh",
            "c2gYAiABKAsyBS5IYXNoEhUKDUNvbnRyYWN0Qnl0ZXMYAyABKAwSFAoMU2Vy",
            "aWFsTnVtYmVyGAQgASgEInsKF1NtYXJ0Q29udHJhY3REZXBsb3ltZW50EhsK",
            "DENvbnRyYWN0SGFzaBgBIAEoCzIFLkhhc2gSFQoGQ2FsbGVyGAIgASgLMgUu",
            "SGFzaBIXCg9Db25zdHJ1Y3RQYXJhbXMYAyABKAwSEwoLSW5jcmVtZW50SWQY",
            "BCABKAQiJAoKUGFyYW1ldGVycxIWCgZQYXJhbXMYASADKAsyBi5QYXJhbSKk",
            "AgoFUGFyYW0SEAoGaW50VmFsGAEgASgFSAASEQoHdWludFZhbBgCIAEoDUgA",
            "EhEKB2xvbmdWYWwYAyABKANIABISCgh1bG9uZ1ZhbBgEIAEoBEgAEhEKB2Jv",
            "b2xWYWwYBSABKAhIABISCghieXRlc1ZhbBgGIAEoDEgAEhAKBnN0clZhbBgH",
            "IAEoCUgAEg4KBGRWYWwYCCABKAFIABIYCgdoYXNoVmFsGAkgASgLMgUuSGFz",
            "aEgAEjEKC3JlZ2lzdGVyVmFsGAogASgLMhouU21hcnRDb250cmFjdFJlZ2lz",
            "dHJhdGlvbkgAEjEKDWRlcGxveW1lbnRWYWwYCyABKAsyGC5TbWFydENvbnRy",
            "YWN0RGVwbG95bWVudEgAQgYKBGRhdGEibAoaU21hcnRDb250cmFjdEludm9r",
            "ZUNvbnRleHQSFQoGQ2FsbGVyGAEgASgLMgUuSGFzaBITCgtJbmNyZW1lbnRJ",
            "ZBgCIAEoBBISCgpNZXRob2ROYW1lGAMgASgJEg4KBlBhcmFtcxgEIAEoDCJr",
            "CghEYXRhSXRlbRIbCgxSZXNvdXJjZVBhdGgYASABKAsyBS5IYXNoEh4KD1Jl",
            "c291cmNlUG9pbnRlchgCIAEoCzIFLkhhc2gSIgoTU3RhdGVNZXJrbGVUcmVl",
            "TGVhZhgDIAEoCzIFLkhhc2giJQoKV29ybGRTdGF0ZRIXCgREYXRhGAEgAygL",
            "MgkuRGF0YUl0ZW0iOwoFQ2hhaW4SEQoCSWQYASABKAsyBS5IYXNoEh8KEEdl",
            "bmVzaXNCbG9ja0hhc2gYAiABKAsyBS5IYXNoIjQKA0tleRINCgVWYWx1ZRgB",
            "IAEoDBIMCgR0eXBlGAIgASgJEhAKCEhhc2hUeXBlGAMgASgNItoBCghEYXRh",
            "UGF0aBIWCgdDaGFpbklkGAEgASgLMgUuSGFzaBITCgtCbG9ja0hlaWdodBgC",
            "IAEoBBImChRCbG9ja1Byb2R1Y2VyQWRkcmVzcxgDIAEoCzIILkFkZHJlc3MS",
            "IQoPQ29udHJhY3RBZGRyZXNzGAQgASgLMgguQWRkcmVzcxIfChBEYXRhUHJv",
            "dmlkZXJIYXNoGAUgASgLMgUuSGFzaBIWCgdLZXlIYXNoGAYgASgLMgUuSGFz",
            "aBIdCglTdGF0ZVBhdGgYByABKAsyCi5TdGF0ZVBhdGgiUAoQQmluYXJ5TWVy",
            "a2xlVHJlZRIUCgVOb2RlcxgBIAMoCzIFLkhhc2gSEwoEUm9vdBgCIAEoCzIF",
            "Lkhhc2gSEQoJTGVhZkNvdW50GAMgASgFIhwKClN0cmluZ0xpc3QSDgoGVmFs",
            "dWVzGAEgAygJKnMKD1RyYW5zYWN0aW9uVHlwZRIXChNDb250cmFjdFRyYW5z",
            "YWN0aW9uEAASEwoPRHBvc1RyYW5zYWN0aW9uEAESEwoPTXNpZ1RyYW5zYWN0",
            "aW9uEAISHQoZQ29udHJhY3REZXBsb3lUcmFuc2FjdGlvbhADKjwKBlN0YXR1",
            "cxIOCgpOb3RFeGlzdGVkEAASCwoHUGVuZGluZxABEgoKBkZhaWxlZBACEgkK",
            "BU1pbmVkEAMqxwEKD0V4ZWN1dGlvblN0YXR1cxINCglVbmRlZmluZWQQABIb",
            "ChdFeGVjdXRlZEJ1dE5vdENvbW1pdHRlZBABEhgKFEV4ZWN1dGVkQW5kQ29t",
            "bWl0dGVkEAISFQoIQ2FuY2VsZWQQ////////////ARIYCgtTeXN0ZW1FcnJv",
            "chD+//////////8BEhoKDUNvbnRyYWN0RXJyb3IQ9v//////////ARIhChRF",
            "eGNlZWRlZE1heENhbGxEZXB0aBD1//////////8BKl4KDkRhdGFBY2Nlc3NN",
            "b2RlEhoKFlJlYWRPbmx5QWNjb3VudFNoYXJpbmcQABIbChdSZWFkV3JpdGVB",
            "Y2NvdW50U2hhcmluZxABEhMKD0FjY291bnRTcGVjaWZpYxACQg6qAgtBRWxm",
            "Lktlcm5lbGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::AElf.Common.CommonReflection.Descriptor, global::AElf.Kernel.CrosschainReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::AElf.Kernel.TransactionType), typeof(global::AElf.Kernel.Status), typeof(global::AElf.Kernel.ExecutionStatus), typeof(global::AElf.Kernel.DataAccessMode), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.Transaction), global::AElf.Kernel.Transaction.Parser, new[]{ "From", "To", "RefBlockNumber", "RefBlockPrefix", "IncrementId", "MethodName", "Params", "Fee", "Sigs", "Type", "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.TransactionReceipt), global::AElf.Kernel.TransactionReceipt.Parser, new[]{ "TransactionId", "Transaction", "SignatureSt", "RefBlockSt", "Status", "IsSystemTxn", "ExecutedBlockNumber" }, null, new[]{ typeof(global::AElf.Kernel.TransactionReceipt.Types.TransactionStatus), typeof(global::AElf.Kernel.TransactionReceipt.Types.SignatureStatus), typeof(global::AElf.Kernel.TransactionReceipt.Types.RefBlockStatus) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.StatePath), global::AElf.Kernel.StatePath.Parser, new[]{ "Path" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.StateValue), global::AElf.Kernel.StateValue.Parser, new[]{ "CurrentValue", "OriginalValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.StateChange), global::AElf.Kernel.StateChange.Parser, new[]{ "StatePath", "StateValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.TransactionList), global::AElf.Kernel.TransactionList.Parser, new[]{ "Transactions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.TransactionResult), global::AElf.Kernel.TransactionResult.Parser, new[]{ "TransactionId", "Status", "Logs", "Bloom", "RetVal", "BlockNumber", "BlockHash", "Index", "StateHash", "DeferredTxnId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.TransactionTrace), global::AElf.Kernel.TransactionTrace.Parser, new[]{ "TransactionId", "RetVal", "StdOut", "StdErr", "StateHash", "Logs", "InlineTransactions", "InlineTraces", "StateChanges", "Elapsed", "ExecutionStatus", "DeferredTransaction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.LogEvent), global::AElf.Kernel.LogEvent.Parser, new[]{ "Address", "Topics", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.RetVal), global::AElf.Kernel.RetVal.Parser, new[]{ "Type", "Data" }, null, new[]{ typeof(global::AElf.Kernel.RetVal.Types.RetType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.BlockHeaderList), global::AElf.Kernel.BlockHeaderList.Parser, new[]{ "Headers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.BlockHeader), global::AElf.Kernel.BlockHeader.Parser, new[]{ "Version", "PreviousBlockHash", "MerkleTreeRootOfTransactions", "MerkleTreeRootOfWorldState", "Bloom", "Index", "Sig", "P", "Time", "ChainId", "SideChainTransactionsRoot" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.BlockBody), global::AElf.Kernel.BlockBody.Parser, new[]{ "BlockHeader", "Transactions", "TransactionList", "IndexedInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.Block), global::AElf.Kernel.Block.Parser, new[]{ "Header", "Body" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.SmartContractRegistration), global::AElf.Kernel.SmartContractRegistration.Parser, new[]{ "Category", "ContractHash", "ContractBytes", "SerialNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.SmartContractDeployment), global::AElf.Kernel.SmartContractDeployment.Parser, new[]{ "ContractHash", "Caller", "ConstructParams", "IncrementId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.Parameters), global::AElf.Kernel.Parameters.Parser, new[]{ "Params" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.Param), global::AElf.Kernel.Param.Parser, new[]{ "IntVal", "UintVal", "LongVal", "UlongVal", "BoolVal", "BytesVal", "StrVal", "DVal", "HashVal", "RegisterVal", "DeploymentVal" }, new[]{ "Data" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.SmartContractInvokeContext), global::AElf.Kernel.SmartContractInvokeContext.Parser, new[]{ "Caller", "IncrementId", "MethodName", "Params" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.DataItem), global::AElf.Kernel.DataItem.Parser, new[]{ "ResourcePath", "ResourcePointer", "StateMerkleTreeLeaf" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.WorldState), global::AElf.Kernel.WorldState.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.Chain), global::AElf.Kernel.Chain.Parser, new[]{ "Id", "GenesisBlockHash" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.Key), global::AElf.Kernel.Key.Parser, new[]{ "Value", "Type", "HashType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.DataPath), global::AElf.Kernel.DataPath.Parser, new[]{ "ChainId", "BlockHeight", "BlockProducerAddress", "ContractAddress", "DataProviderHash", "KeyHash", "StatePath" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.BinaryMerkleTree), global::AElf.Kernel.BinaryMerkleTree.Parser, new[]{ "Nodes", "Root", "LeafCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.StringList), global::AElf.Kernel.StringList.Parser, new[]{ "Values" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum TransactionType {
    [pbr::OriginalName("ContractTransaction")] ContractTransaction = 0,
    [pbr::OriginalName("DposTransaction")] DposTransaction = 1,
    [pbr::OriginalName("MsigTransaction")] MsigTransaction = 2,
    [pbr::OriginalName("ContractDeployTransaction")] ContractDeployTransaction = 3,
  }

  public enum Status {
    [pbr::OriginalName("NotExisted")] NotExisted = 0,
    [pbr::OriginalName("Pending")] Pending = 1,
    [pbr::OriginalName("Failed")] Failed = 2,
    [pbr::OriginalName("Mined")] Mined = 3,
  }

  /// <summary>
  /// For failed transactions, its status follows the Min of
  /// its own status and its inline transactions'
  /// </summary>
  public enum ExecutionStatus {
    [pbr::OriginalName("Undefined")] Undefined = 0,
    /// <summary>
    /// Successful =>
    /// </summary>
    [pbr::OriginalName("ExecutedButNotCommitted")] ExecutedButNotCommitted = 1,
    [pbr::OriginalName("ExecutedAndCommitted")] ExecutedAndCommitted = 2,
    /// <summary>
    /// Failed =>
    ///   Infrastructure reasons
    /// </summary>
    [pbr::OriginalName("Canceled")] Canceled = -1,
    [pbr::OriginalName("SystemError")] SystemError = -2,
    /// <summary>
    ///   Contract reasons
    /// </summary>
    [pbr::OriginalName("ContractError")] ContractError = -10,
    [pbr::OriginalName("ExceededMaxCallDepth")] ExceededMaxCallDepth = -11,
  }

  public enum DataAccessMode {
    [pbr::OriginalName("ReadOnlyAccountSharing")] ReadOnlyAccountSharing = 0,
    [pbr::OriginalName("ReadWriteAccountSharing")] ReadWriteAccountSharing = 1,
    [pbr::OriginalName("AccountSpecific")] AccountSpecific = 2,
  }

  #endregion

  #region Messages
  public sealed partial class Transaction : pb::IMessage<Transaction> {
    private static readonly pb::MessageParser<Transaction> _parser = new pb::MessageParser<Transaction>(() => new Transaction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transaction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.KernelReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction(Transaction other) : this() {
      from_ = other.from_ != null ? other.from_.Clone() : null;
      to_ = other.to_ != null ? other.to_.Clone() : null;
      refBlockNumber_ = other.refBlockNumber_;
      refBlockPrefix_ = other.refBlockPrefix_;
      incrementId_ = other.incrementId_;
      methodName_ = other.methodName_;
      params_ = other.params_;
      fee_ = other.fee_;
      sigs_ = other.sigs_.Clone();
      type_ = other.type_;
      time_ = other.time_ != null ? other.time_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction Clone() {
      return new Transaction(this);
    }

    /// <summary>Field number for the "From" field.</summary>
    public const int FromFieldNumber = 1;
    private global::AElf.Common.Address from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Address From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "To" field.</summary>
    public const int ToFieldNumber = 2;
    private global::AElf.Common.Address to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Address To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "RefBlockNumber" field.</summary>
    public const int RefBlockNumberFieldNumber = 3;
    private ulong refBlockNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RefBlockNumber {
      get { return refBlockNumber_; }
      set {
        refBlockNumber_ = value;
      }
    }

    /// <summary>Field number for the "RefBlockPrefix" field.</summary>
    public const int RefBlockPrefixFieldNumber = 4;
    private pb::ByteString refBlockPrefix_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RefBlockPrefix {
      get { return refBlockPrefix_; }
      set {
        refBlockPrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IncrementId" field.</summary>
    public const int IncrementIdFieldNumber = 5;
    private ulong incrementId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong IncrementId {
      get { return incrementId_; }
      set {
        incrementId_ = value;
      }
    }

    /// <summary>Field number for the "MethodName" field.</summary>
    public const int MethodNameFieldNumber = 6;
    private string methodName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MethodName {
      get { return methodName_; }
      set {
        methodName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Params" field.</summary>
    public const int ParamsFieldNumber = 7;
    private pb::ByteString params_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Params {
      get { return params_; }
      set {
        params_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Fee" field.</summary>
    public const int FeeFieldNumber = 8;
    private ulong fee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Fee {
      get { return fee_; }
      set {
        fee_ = value;
      }
    }

    /// <summary>Field number for the "Sigs" field.</summary>
    public const int SigsFieldNumber = 9;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_sigs_codec
        = pb::FieldCodec.ForBytes(74);
    private readonly pbc::RepeatedField<pb::ByteString> sigs_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Sigs {
      get { return sigs_; }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 10;
    private global::AElf.Kernel.TransactionType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Kernel.TransactionType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Time" field.</summary>
    public const int TimeFieldNumber = 11;
    private global::Google.Protobuf.WellKnownTypes.Timestamp time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transaction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transaction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(From, other.From)) return false;
      if (!object.Equals(To, other.To)) return false;
      if (RefBlockNumber != other.RefBlockNumber) return false;
      if (RefBlockPrefix != other.RefBlockPrefix) return false;
      if (IncrementId != other.IncrementId) return false;
      if (MethodName != other.MethodName) return false;
      if (Params != other.Params) return false;
      if (Fee != other.Fee) return false;
      if(!sigs_.Equals(other.sigs_)) return false;
      if (Type != other.Type) return false;
      if (!object.Equals(Time, other.Time)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (from_ != null) hash ^= From.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (RefBlockNumber != 0UL) hash ^= RefBlockNumber.GetHashCode();
      if (RefBlockPrefix.Length != 0) hash ^= RefBlockPrefix.GetHashCode();
      if (IncrementId != 0UL) hash ^= IncrementId.GetHashCode();
      if (MethodName.Length != 0) hash ^= MethodName.GetHashCode();
      if (Params.Length != 0) hash ^= Params.GetHashCode();
      if (Fee != 0UL) hash ^= Fee.GetHashCode();
      hash ^= sigs_.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (time_ != null) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (from_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(To);
      }
      if (RefBlockNumber != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RefBlockNumber);
      }
      if (RefBlockPrefix.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(RefBlockPrefix);
      }
      if (IncrementId != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(IncrementId);
      }
      if (MethodName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(MethodName);
      }
      if (Params.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(Params);
      }
      if (Fee != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(Fee);
      }
      sigs_.WriteTo(output, _repeated_sigs_codec);
      if (Type != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Type);
      }
      if (time_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (RefBlockNumber != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RefBlockNumber);
      }
      if (RefBlockPrefix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RefBlockPrefix);
      }
      if (IncrementId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(IncrementId);
      }
      if (MethodName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MethodName);
      }
      if (Params.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Params);
      }
      if (Fee != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Fee);
      }
      size += sigs_.CalculateSize(_repeated_sigs_codec);
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (time_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transaction other) {
      if (other == null) {
        return;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          from_ = new global::AElf.Common.Address();
        }
        From.MergeFrom(other.From);
      }
      if (other.to_ != null) {
        if (to_ == null) {
          to_ = new global::AElf.Common.Address();
        }
        To.MergeFrom(other.To);
      }
      if (other.RefBlockNumber != 0UL) {
        RefBlockNumber = other.RefBlockNumber;
      }
      if (other.RefBlockPrefix.Length != 0) {
        RefBlockPrefix = other.RefBlockPrefix;
      }
      if (other.IncrementId != 0UL) {
        IncrementId = other.IncrementId;
      }
      if (other.MethodName.Length != 0) {
        MethodName = other.MethodName;
      }
      if (other.Params.Length != 0) {
        Params = other.Params;
      }
      if (other.Fee != 0UL) {
        Fee = other.Fee;
      }
      sigs_.Add(other.sigs_);
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.time_ != null) {
        if (time_ == null) {
          time_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Time.MergeFrom(other.Time);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (from_ == null) {
              from_ = new global::AElf.Common.Address();
            }
            input.ReadMessage(from_);
            break;
          }
          case 18: {
            if (to_ == null) {
              to_ = new global::AElf.Common.Address();
            }
            input.ReadMessage(to_);
            break;
          }
          case 24: {
            RefBlockNumber = input.ReadUInt64();
            break;
          }
          case 34: {
            RefBlockPrefix = input.ReadBytes();
            break;
          }
          case 40: {
            IncrementId = input.ReadUInt64();
            break;
          }
          case 50: {
            MethodName = input.ReadString();
            break;
          }
          case 58: {
            Params = input.ReadBytes();
            break;
          }
          case 64: {
            Fee = input.ReadUInt64();
            break;
          }
          case 74: {
            sigs_.AddEntriesFrom(input, _repeated_sigs_codec);
            break;
          }
          case 80: {
            type_ = (global::AElf.Kernel.TransactionType) input.ReadEnum();
            break;
          }
          case 90: {
            if (time_ == null) {
              time_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(time_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransactionReceipt : pb::IMessage<TransactionReceipt> {
    private static readonly pb::MessageParser<TransactionReceipt> _parser = new pb::MessageParser<TransactionReceipt>(() => new TransactionReceipt());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionReceipt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.KernelReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionReceipt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionReceipt(TransactionReceipt other) : this() {
      transactionId_ = other.transactionId_ != null ? other.transactionId_.Clone() : null;
      transaction_ = other.transaction_ != null ? other.transaction_.Clone() : null;
      signatureSt_ = other.signatureSt_;
      refBlockSt_ = other.refBlockSt_;
      status_ = other.status_;
      isSystemTxn_ = other.isSystemTxn_;
      executedBlockNumber_ = other.executedBlockNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionReceipt Clone() {
      return new TransactionReceipt(this);
    }

    /// <summary>Field number for the "TransactionId" field.</summary>
    public const int TransactionIdFieldNumber = 1;
    private global::AElf.Common.Hash transactionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Hash TransactionId {
      get { return transactionId_; }
      set {
        transactionId_ = value;
      }
    }

    /// <summary>Field number for the "Transaction" field.</summary>
    public const int TransactionFieldNumber = 2;
    private global::AElf.Kernel.Transaction transaction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Kernel.Transaction Transaction {
      get { return transaction_; }
      set {
        transaction_ = value;
      }
    }

    /// <summary>Field number for the "SignatureSt" field.</summary>
    public const int SignatureStFieldNumber = 3;
    private global::AElf.Kernel.TransactionReceipt.Types.SignatureStatus signatureSt_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Kernel.TransactionReceipt.Types.SignatureStatus SignatureSt {
      get { return signatureSt_; }
      set {
        signatureSt_ = value;
      }
    }

    /// <summary>Field number for the "RefBlockSt" field.</summary>
    public const int RefBlockStFieldNumber = 4;
    private global::AElf.Kernel.TransactionReceipt.Types.RefBlockStatus refBlockSt_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Kernel.TransactionReceipt.Types.RefBlockStatus RefBlockSt {
      get { return refBlockSt_; }
      set {
        refBlockSt_ = value;
      }
    }

    /// <summary>Field number for the "Status" field.</summary>
    public const int StatusFieldNumber = 5;
    private global::AElf.Kernel.TransactionReceipt.Types.TransactionStatus status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Kernel.TransactionReceipt.Types.TransactionStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "IsSystemTxn" field.</summary>
    public const int IsSystemTxnFieldNumber = 6;
    private bool isSystemTxn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSystemTxn {
      get { return isSystemTxn_; }
      set {
        isSystemTxn_ = value;
      }
    }

    /// <summary>Field number for the "ExecutedBlockNumber" field.</summary>
    public const int ExecutedBlockNumberFieldNumber = 7;
    private ulong executedBlockNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ExecutedBlockNumber {
      get { return executedBlockNumber_; }
      set {
        executedBlockNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionReceipt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionReceipt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TransactionId, other.TransactionId)) return false;
      if (!object.Equals(Transaction, other.Transaction)) return false;
      if (SignatureSt != other.SignatureSt) return false;
      if (RefBlockSt != other.RefBlockSt) return false;
      if (Status != other.Status) return false;
      if (IsSystemTxn != other.IsSystemTxn) return false;
      if (ExecutedBlockNumber != other.ExecutedBlockNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (transactionId_ != null) hash ^= TransactionId.GetHashCode();
      if (transaction_ != null) hash ^= Transaction.GetHashCode();
      if (SignatureSt != 0) hash ^= SignatureSt.GetHashCode();
      if (RefBlockSt != 0) hash ^= RefBlockSt.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (IsSystemTxn != false) hash ^= IsSystemTxn.GetHashCode();
      if (ExecutedBlockNumber != 0UL) hash ^= ExecutedBlockNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (transactionId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TransactionId);
      }
      if (transaction_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Transaction);
      }
      if (SignatureSt != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) SignatureSt);
      }
      if (RefBlockSt != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) RefBlockSt);
      }
      if (Status != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Status);
      }
      if (IsSystemTxn != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsSystemTxn);
      }
      if (ExecutedBlockNumber != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(ExecutedBlockNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (transactionId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TransactionId);
      }
      if (transaction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transaction);
      }
      if (SignatureSt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SignatureSt);
      }
      if (RefBlockSt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RefBlockSt);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (IsSystemTxn != false) {
        size += 1 + 1;
      }
      if (ExecutedBlockNumber != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExecutedBlockNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionReceipt other) {
      if (other == null) {
        return;
      }
      if (other.transactionId_ != null) {
        if (transactionId_ == null) {
          transactionId_ = new global::AElf.Common.Hash();
        }
        TransactionId.MergeFrom(other.TransactionId);
      }
      if (other.transaction_ != null) {
        if (transaction_ == null) {
          transaction_ = new global::AElf.Kernel.Transaction();
        }
        Transaction.MergeFrom(other.Transaction);
      }
      if (other.SignatureSt != 0) {
        SignatureSt = other.SignatureSt;
      }
      if (other.RefBlockSt != 0) {
        RefBlockSt = other.RefBlockSt;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.IsSystemTxn != false) {
        IsSystemTxn = other.IsSystemTxn;
      }
      if (other.ExecutedBlockNumber != 0UL) {
        ExecutedBlockNumber = other.ExecutedBlockNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (transactionId_ == null) {
              transactionId_ = new global::AElf.Common.Hash();
            }
            input.ReadMessage(transactionId_);
            break;
          }
          case 18: {
            if (transaction_ == null) {
              transaction_ = new global::AElf.Kernel.Transaction();
            }
            input.ReadMessage(transaction_);
            break;
          }
          case 24: {
            signatureSt_ = (global::AElf.Kernel.TransactionReceipt.Types.SignatureStatus) input.ReadEnum();
            break;
          }
          case 32: {
            refBlockSt_ = (global::AElf.Kernel.TransactionReceipt.Types.RefBlockStatus) input.ReadEnum();
            break;
          }
          case 40: {
            status_ = (global::AElf.Kernel.TransactionReceipt.Types.TransactionStatus) input.ReadEnum();
            break;
          }
          case 48: {
            IsSystemTxn = input.ReadBool();
            break;
          }
          case 56: {
            ExecutedBlockNumber = input.ReadUInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TransactionReceipt message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum TransactionStatus {
        [pbr::OriginalName("UnknownTransactionStatus")] UnknownTransactionStatus = 0,
        [pbr::OriginalName("TransactionExecuting")] TransactionExecuting = 1,
        [pbr::OriginalName("TransactionExecuted")] TransactionExecuted = 2,
      }

      public enum SignatureStatus {
        [pbr::OriginalName("UnknownSignatureStatus")] UnknownSignatureStatus = 0,
        [pbr::OriginalName("SignatureValid")] SignatureValid = 1,
        [pbr::OriginalName("SignatureInvalid")] SignatureInvalid = -1,
      }

      public enum RefBlockStatus {
        [pbr::OriginalName("UnknownRefBlockStatus")] UnknownRefBlockStatus = 0,
        [pbr::OriginalName("RefBlockValid")] RefBlockValid = 1,
        [pbr::OriginalName("RefBlockInvalid")] RefBlockInvalid = -1,
        [pbr::OriginalName("RefBlockExpired")] RefBlockExpired = -2,
        [pbr::OriginalName("FutureRefBlock")] FutureRefBlock = -3,
      }

    }
    #endregion

  }

  public sealed partial class StatePath : pb::IMessage<StatePath> {
    private static readonly pb::MessageParser<StatePath> _parser = new pb::MessageParser<StatePath>(() => new StatePath());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatePath> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.KernelReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatePath() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatePath(StatePath other) : this() {
      path_ = other.path_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatePath Clone() {
      return new StatePath(this);
    }

    /// <summary>Field number for the "Path" field.</summary>
    public const int PathFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_path_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> path_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    ///    Address ContractAddress = 2;
    ///    Hash ChainId = 3;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Path {
      get { return path_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatePath);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatePath other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!path_.Equals(other.path_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= path_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      path_.WriteTo(output, _repeated_path_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += path_.CalculateSize(_repeated_path_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatePath other) {
      if (other == null) {
        return;
      }
      path_.Add(other.path_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            path_.AddEntriesFrom(input, _repeated_path_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StateValue : pb::IMessage<StateValue> {
    private static readonly pb::MessageParser<StateValue> _parser = new pb::MessageParser<StateValue>(() => new StateValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StateValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.KernelReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateValue(StateValue other) : this() {
      currentValue_ = other.currentValue_;
      originalValue_ = other.originalValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateValue Clone() {
      return new StateValue(this);
    }

    /// <summary>Field number for the "CurrentValue" field.</summary>
    public const int CurrentValueFieldNumber = 1;
    private pb::ByteString currentValue_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CurrentValue {
      get { return currentValue_; }
      set {
        currentValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OriginalValue" field.</summary>
    public const int OriginalValueFieldNumber = 2;
    private pb::ByteString originalValue_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OriginalValue {
      get { return originalValue_; }
      set {
        originalValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StateValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StateValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentValue != other.CurrentValue) return false;
      if (OriginalValue != other.OriginalValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentValue.Length != 0) hash ^= CurrentValue.GetHashCode();
      if (OriginalValue.Length != 0) hash ^= OriginalValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentValue.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(CurrentValue);
      }
      if (OriginalValue.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(OriginalValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CurrentValue);
      }
      if (OriginalValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OriginalValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StateValue other) {
      if (other == null) {
        return;
      }
      if (other.CurrentValue.Length != 0) {
        CurrentValue = other.CurrentValue;
      }
      if (other.OriginalValue.Length != 0) {
        OriginalValue = other.OriginalValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CurrentValue = input.ReadBytes();
            break;
          }
          case 18: {
            OriginalValue = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StateChange : pb::IMessage<StateChange> {
    private static readonly pb::MessageParser<StateChange> _parser = new pb::MessageParser<StateChange>(() => new StateChange());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StateChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.KernelReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateChange(StateChange other) : this() {
      statePath_ = other.statePath_ != null ? other.statePath_.Clone() : null;
      stateValue_ = other.stateValue_ != null ? other.stateValue_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateChange Clone() {
      return new StateChange(this);
    }

    /// <summary>Field number for the "StatePath" field.</summary>
    public const int StatePathFieldNumber = 1;
    private global::AElf.Kernel.StatePath statePath_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Kernel.StatePath StatePath {
      get { return statePath_; }
      set {
        statePath_ = value;
      }
    }

    /// <summary>Field number for the "StateValue" field.</summary>
    public const int StateValueFieldNumber = 2;
    private global::AElf.Kernel.StateValue stateValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Kernel.StateValue StateValue {
      get { return stateValue_; }
      set {
        stateValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StateChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StateChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StatePath, other.StatePath)) return false;
      if (!object.Equals(StateValue, other.StateValue)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (statePath_ != null) hash ^= StatePath.GetHashCode();
      if (stateValue_ != null) hash ^= StateValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (statePath_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StatePath);
      }
      if (stateValue_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(StateValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (statePath_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StatePath);
      }
      if (stateValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StateValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StateChange other) {
      if (other == null) {
        return;
      }
      if (other.statePath_ != null) {
        if (statePath_ == null) {
          statePath_ = new global::AElf.Kernel.StatePath();
        }
        StatePath.MergeFrom(other.StatePath);
      }
      if (other.stateValue_ != null) {
        if (stateValue_ == null) {
          stateValue_ = new global::AElf.Kernel.StateValue();
        }
        StateValue.MergeFrom(other.StateValue);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (statePath_ == null) {
              statePath_ = new global::AElf.Kernel.StatePath();
            }
            input.ReadMessage(statePath_);
            break;
          }
          case 18: {
            if (stateValue_ == null) {
              stateValue_ = new global::AElf.Kernel.StateValue();
            }
            input.ReadMessage(stateValue_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransactionList : pb::IMessage<TransactionList> {
    private static readonly pb::MessageParser<TransactionList> _parser = new pb::MessageParser<TransactionList>(() => new TransactionList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.KernelReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionList(TransactionList other) : this() {
      transactions_ = other.transactions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionList Clone() {
      return new TransactionList(this);
    }

    /// <summary>Field number for the "Transactions" field.</summary>
    public const int TransactionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Kernel.Transaction> _repeated_transactions_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Kernel.Transaction.Parser);
    private readonly pbc::RepeatedField<global::AElf.Kernel.Transaction> transactions_ = new pbc::RepeatedField<global::AElf.Kernel.Transaction>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Kernel.Transaction> Transactions {
      get { return transactions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!transactions_.Equals(other.transactions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= transactions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      transactions_.WriteTo(output, _repeated_transactions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += transactions_.CalculateSize(_repeated_transactions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionList other) {
      if (other == null) {
        return;
      }
      transactions_.Add(other.transactions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            transactions_.AddEntriesFrom(input, _repeated_transactions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransactionResult : pb::IMessage<TransactionResult> {
    private static readonly pb::MessageParser<TransactionResult> _parser = new pb::MessageParser<TransactionResult>(() => new TransactionResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.KernelReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionResult(TransactionResult other) : this() {
      transactionId_ = other.transactionId_ != null ? other.transactionId_.Clone() : null;
      status_ = other.status_;
      logs_ = other.logs_.Clone();
      bloom_ = other.bloom_;
      retVal_ = other.retVal_;
      blockNumber_ = other.blockNumber_;
      blockHash_ = other.blockHash_ != null ? other.blockHash_.Clone() : null;
      index_ = other.index_;
      stateHash_ = other.stateHash_ != null ? other.stateHash_.Clone() : null;
      deferredTxnId_ = other.deferredTxnId_ != null ? other.deferredTxnId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionResult Clone() {
      return new TransactionResult(this);
    }

    /// <summary>Field number for the "TransactionId" field.</summary>
    public const int TransactionIdFieldNumber = 1;
    private global::AElf.Common.Hash transactionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Hash TransactionId {
      get { return transactionId_; }
      set {
        transactionId_ = value;
      }
    }

    /// <summary>Field number for the "Status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::AElf.Kernel.Status status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Kernel.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "Logs" field.</summary>
    public const int LogsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::AElf.Kernel.LogEvent> _repeated_logs_codec
        = pb::FieldCodec.ForMessage(26, global::AElf.Kernel.LogEvent.Parser);
    private readonly pbc::RepeatedField<global::AElf.Kernel.LogEvent> logs_ = new pbc::RepeatedField<global::AElf.Kernel.LogEvent>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Kernel.LogEvent> Logs {
      get { return logs_; }
    }

    /// <summary>Field number for the "Bloom" field.</summary>
    public const int BloomFieldNumber = 4;
    private pb::ByteString bloom_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Bloom {
      get { return bloom_; }
      set {
        bloom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RetVal" field.</summary>
    public const int RetValFieldNumber = 5;
    private pb::ByteString retVal_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RetVal {
      get { return retVal_; }
      set {
        retVal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BlockNumber" field.</summary>
    public const int BlockNumberFieldNumber = 6;
    private ulong blockNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BlockNumber {
      get { return blockNumber_; }
      set {
        blockNumber_ = value;
      }
    }

    /// <summary>Field number for the "BlockHash" field.</summary>
    public const int BlockHashFieldNumber = 7;
    private global::AElf.Common.Hash blockHash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Hash BlockHash {
      get { return blockHash_; }
      set {
        blockHash_ = value;
      }
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 8;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "StateHash" field.</summary>
    public const int StateHashFieldNumber = 9;
    private global::AElf.Common.Hash stateHash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Hash StateHash {
      get { return stateHash_; }
      set {
        stateHash_ = value;
      }
    }

    /// <summary>Field number for the "DeferredTxnId" field.</summary>
    public const int DeferredTxnIdFieldNumber = 10;
    private global::AElf.Common.Hash deferredTxnId_;
    /// <summary>
    /// Merkle proof path for this transaction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Hash DeferredTxnId {
      get { return deferredTxnId_; }
      set {
        deferredTxnId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TransactionId, other.TransactionId)) return false;
      if (Status != other.Status) return false;
      if(!logs_.Equals(other.logs_)) return false;
      if (Bloom != other.Bloom) return false;
      if (RetVal != other.RetVal) return false;
      if (BlockNumber != other.BlockNumber) return false;
      if (!object.Equals(BlockHash, other.BlockHash)) return false;
      if (Index != other.Index) return false;
      if (!object.Equals(StateHash, other.StateHash)) return false;
      if (!object.Equals(DeferredTxnId, other.DeferredTxnId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (transactionId_ != null) hash ^= TransactionId.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= logs_.GetHashCode();
      if (Bloom.Length != 0) hash ^= Bloom.GetHashCode();
      if (RetVal.Length != 0) hash ^= RetVal.GetHashCode();
      if (BlockNumber != 0UL) hash ^= BlockNumber.GetHashCode();
      if (blockHash_ != null) hash ^= BlockHash.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (stateHash_ != null) hash ^= StateHash.GetHashCode();
      if (deferredTxnId_ != null) hash ^= DeferredTxnId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (transactionId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TransactionId);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      logs_.WriteTo(output, _repeated_logs_codec);
      if (Bloom.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Bloom);
      }
      if (RetVal.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(RetVal);
      }
      if (BlockNumber != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(BlockNumber);
      }
      if (blockHash_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(BlockHash);
      }
      if (Index != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Index);
      }
      if (stateHash_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(StateHash);
      }
      if (deferredTxnId_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(DeferredTxnId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (transactionId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TransactionId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      size += logs_.CalculateSize(_repeated_logs_codec);
      if (Bloom.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Bloom);
      }
      if (RetVal.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RetVal);
      }
      if (BlockNumber != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BlockNumber);
      }
      if (blockHash_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlockHash);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (stateHash_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StateHash);
      }
      if (deferredTxnId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeferredTxnId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionResult other) {
      if (other == null) {
        return;
      }
      if (other.transactionId_ != null) {
        if (transactionId_ == null) {
          transactionId_ = new global::AElf.Common.Hash();
        }
        TransactionId.MergeFrom(other.TransactionId);
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      logs_.Add(other.logs_);
      if (other.Bloom.Length != 0) {
        Bloom = other.Bloom;
      }
      if (other.RetVal.Length != 0) {
        RetVal = other.RetVal;
      }
      if (other.BlockNumber != 0UL) {
        BlockNumber = other.BlockNumber;
      }
      if (other.blockHash_ != null) {
        if (blockHash_ == null) {
          blockHash_ = new global::AElf.Common.Hash();
        }
        BlockHash.MergeFrom(other.BlockHash);
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.stateHash_ != null) {
        if (stateHash_ == null) {
          stateHash_ = new global::AElf.Common.Hash();
        }
        StateHash.MergeFrom(other.StateHash);
      }
      if (other.deferredTxnId_ != null) {
        if (deferredTxnId_ == null) {
          deferredTxnId_ = new global::AElf.Common.Hash();
        }
        DeferredTxnId.MergeFrom(other.DeferredTxnId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (transactionId_ == null) {
              transactionId_ = new global::AElf.Common.Hash();
            }
            input.ReadMessage(transactionId_);
            break;
          }
          case 16: {
            status_ = (global::AElf.Kernel.Status) input.ReadEnum();
            break;
          }
          case 26: {
            logs_.AddEntriesFrom(input, _repeated_logs_codec);
            break;
          }
          case 34: {
            Bloom = input.ReadBytes();
            break;
          }
          case 42: {
            RetVal = input.ReadBytes();
            break;
          }
          case 48: {
            BlockNumber = input.ReadUInt64();
            break;
          }
          case 58: {
            if (blockHash_ == null) {
              blockHash_ = new global::AElf.Common.Hash();
            }
            input.ReadMessage(blockHash_);
            break;
          }
          case 64: {
            Index = input.ReadInt32();
            break;
          }
          case 74: {
            if (stateHash_ == null) {
              stateHash_ = new global::AElf.Common.Hash();
            }
            input.ReadMessage(stateHash_);
            break;
          }
          case 82: {
            if (deferredTxnId_ == null) {
              deferredTxnId_ = new global::AElf.Common.Hash();
            }
            input.ReadMessage(deferredTxnId_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransactionTrace : pb::IMessage<TransactionTrace> {
    private static readonly pb::MessageParser<TransactionTrace> _parser = new pb::MessageParser<TransactionTrace>(() => new TransactionTrace());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionTrace> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.KernelReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionTrace() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionTrace(TransactionTrace other) : this() {
      transactionId_ = other.transactionId_ != null ? other.transactionId_.Clone() : null;
      retVal_ = other.retVal_ != null ? other.retVal_.Clone() : null;
      stdOut_ = other.stdOut_;
      stdErr_ = other.stdErr_;
      stateHash_ = other.stateHash_ != null ? other.stateHash_.Clone() : null;
      logs_ = other.logs_.Clone();
      inlineTransactions_ = other.inlineTransactions_.Clone();
      inlineTraces_ = other.inlineTraces_.Clone();
      stateChanges_ = other.stateChanges_.Clone();
      elapsed_ = other.elapsed_;
      executionStatus_ = other.executionStatus_;
      deferredTransaction_ = other.deferredTransaction_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionTrace Clone() {
      return new TransactionTrace(this);
    }

    /// <summary>Field number for the "TransactionId" field.</summary>
    public const int TransactionIdFieldNumber = 1;
    private global::AElf.Common.Hash transactionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Hash TransactionId {
      get { return transactionId_; }
      set {
        transactionId_ = value;
      }
    }

    /// <summary>Field number for the "RetVal" field.</summary>
    public const int RetValFieldNumber = 2;
    private global::AElf.Kernel.RetVal retVal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Kernel.RetVal RetVal {
      get { return retVal_; }
      set {
        retVal_ = value;
      }
    }

    /// <summary>Field number for the "StdOut" field.</summary>
    public const int StdOutFieldNumber = 3;
    private string stdOut_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StdOut {
      get { return stdOut_; }
      set {
        stdOut_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StdErr" field.</summary>
    public const int StdErrFieldNumber = 4;
    private string stdErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StdErr {
      get { return stdErr_; }
      set {
        stdErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StateHash" field.</summary>
    public const int StateHashFieldNumber = 5;
    private global::AElf.Common.Hash stateHash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Hash StateHash {
      get { return stateHash_; }
      set {
        stateHash_ = value;
      }
    }

    /// <summary>Field number for the "Logs" field.</summary>
    public const int LogsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::AElf.Kernel.LogEvent> _repeated_logs_codec
        = pb::FieldCodec.ForMessage(50, global::AElf.Kernel.LogEvent.Parser);
    private readonly pbc::RepeatedField<global::AElf.Kernel.LogEvent> logs_ = new pbc::RepeatedField<global::AElf.Kernel.LogEvent>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Kernel.LogEvent> Logs {
      get { return logs_; }
    }

    /// <summary>Field number for the "InlineTransactions" field.</summary>
    public const int InlineTransactionsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::AElf.Kernel.Transaction> _repeated_inlineTransactions_codec
        = pb::FieldCodec.ForMessage(58, global::AElf.Kernel.Transaction.Parser);
    private readonly pbc::RepeatedField<global::AElf.Kernel.Transaction> inlineTransactions_ = new pbc::RepeatedField<global::AElf.Kernel.Transaction>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Kernel.Transaction> InlineTransactions {
      get { return inlineTransactions_; }
    }

    /// <summary>Field number for the "InlineTraces" field.</summary>
    public const int InlineTracesFieldNumber = 8;
    private static readonly pb::FieldCodec<global::AElf.Kernel.TransactionTrace> _repeated_inlineTraces_codec
        = pb::FieldCodec.ForMessage(66, global::AElf.Kernel.TransactionTrace.Parser);
    private readonly pbc::RepeatedField<global::AElf.Kernel.TransactionTrace> inlineTraces_ = new pbc::RepeatedField<global::AElf.Kernel.TransactionTrace>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Kernel.TransactionTrace> InlineTraces {
      get { return inlineTraces_; }
    }

    /// <summary>Field number for the "StateChanges" field.</summary>
    public const int StateChangesFieldNumber = 9;
    private static readonly pb::FieldCodec<global::AElf.Kernel.StateChange> _repeated_stateChanges_codec
        = pb::FieldCodec.ForMessage(74, global::AElf.Kernel.StateChange.Parser);
    private readonly pbc::RepeatedField<global::AElf.Kernel.StateChange> stateChanges_ = new pbc::RepeatedField<global::AElf.Kernel.StateChange>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Kernel.StateChange> StateChanges {
      get { return stateChanges_; }
    }

    /// <summary>Field number for the "Elapsed" field.</summary>
    public const int ElapsedFieldNumber = 10;
    private long elapsed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Elapsed {
      get { return elapsed_; }
      set {
        elapsed_ = value;
      }
    }

    /// <summary>Field number for the "ExecutionStatus" field.</summary>
    public const int ExecutionStatusFieldNumber = 11;
    private global::AElf.Kernel.ExecutionStatus executionStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Kernel.ExecutionStatus ExecutionStatus {
      get { return executionStatus_; }
      set {
        executionStatus_ = value;
      }
    }

    /// <summary>Field number for the "DeferredTransaction" field.</summary>
    public const int DeferredTransactionFieldNumber = 12;
    private pb::ByteString deferredTransaction_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DeferredTransaction {
      get { return deferredTransaction_; }
      set {
        deferredTransaction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionTrace);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionTrace other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TransactionId, other.TransactionId)) return false;
      if (!object.Equals(RetVal, other.RetVal)) return false;
      if (StdOut != other.StdOut) return false;
      if (StdErr != other.StdErr) return false;
      if (!object.Equals(StateHash, other.StateHash)) return false;
      if(!logs_.Equals(other.logs_)) return false;
      if(!inlineTransactions_.Equals(other.inlineTransactions_)) return false;
      if(!inlineTraces_.Equals(other.inlineTraces_)) return false;
      if(!stateChanges_.Equals(other.stateChanges_)) return false;
      if (Elapsed != other.Elapsed) return false;
      if (ExecutionStatus != other.ExecutionStatus) return false;
      if (DeferredTransaction != other.DeferredTransaction) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (transactionId_ != null) hash ^= TransactionId.GetHashCode();
      if (retVal_ != null) hash ^= RetVal.GetHashCode();
      if (StdOut.Length != 0) hash ^= StdOut.GetHashCode();
      if (StdErr.Length != 0) hash ^= StdErr.GetHashCode();
      if (stateHash_ != null) hash ^= StateHash.GetHashCode();
      hash ^= logs_.GetHashCode();
      hash ^= inlineTransactions_.GetHashCode();
      hash ^= inlineTraces_.GetHashCode();
      hash ^= stateChanges_.GetHashCode();
      if (Elapsed != 0L) hash ^= Elapsed.GetHashCode();
      if (ExecutionStatus != 0) hash ^= ExecutionStatus.GetHashCode();
      if (DeferredTransaction.Length != 0) hash ^= DeferredTransaction.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (transactionId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TransactionId);
      }
      if (retVal_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RetVal);
      }
      if (StdOut.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(StdOut);
      }
      if (StdErr.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(StdErr);
      }
      if (stateHash_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(StateHash);
      }
      logs_.WriteTo(output, _repeated_logs_codec);
      inlineTransactions_.WriteTo(output, _repeated_inlineTransactions_codec);
      inlineTraces_.WriteTo(output, _repeated_inlineTraces_codec);
      stateChanges_.WriteTo(output, _repeated_stateChanges_codec);
      if (Elapsed != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(Elapsed);
      }
      if (ExecutionStatus != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) ExecutionStatus);
      }
      if (DeferredTransaction.Length != 0) {
        output.WriteRawTag(98);
        output.WriteBytes(DeferredTransaction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (transactionId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TransactionId);
      }
      if (retVal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RetVal);
      }
      if (StdOut.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StdOut);
      }
      if (StdErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StdErr);
      }
      if (stateHash_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StateHash);
      }
      size += logs_.CalculateSize(_repeated_logs_codec);
      size += inlineTransactions_.CalculateSize(_repeated_inlineTransactions_codec);
      size += inlineTraces_.CalculateSize(_repeated_inlineTraces_codec);
      size += stateChanges_.CalculateSize(_repeated_stateChanges_codec);
      if (Elapsed != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Elapsed);
      }
      if (ExecutionStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ExecutionStatus);
      }
      if (DeferredTransaction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DeferredTransaction);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionTrace other) {
      if (other == null) {
        return;
      }
      if (other.transactionId_ != null) {
        if (transactionId_ == null) {
          transactionId_ = new global::AElf.Common.Hash();
        }
        TransactionId.MergeFrom(other.TransactionId);
      }
      if (other.retVal_ != null) {
        if (retVal_ == null) {
          retVal_ = new global::AElf.Kernel.RetVal();
        }
        RetVal.MergeFrom(other.RetVal);
      }
      if (other.StdOut.Length != 0) {
        StdOut = other.StdOut;
      }
      if (other.StdErr.Length != 0) {
        StdErr = other.StdErr;
      }
      if (other.stateHash_ != null) {
        if (stateHash_ == null) {
          stateHash_ = new global::AElf.Common.Hash();
        }
        StateHash.MergeFrom(other.StateHash);
      }
      logs_.Add(other.logs_);
      inlineTransactions_.Add(other.inlineTransactions_);
      inlineTraces_.Add(other.inlineTraces_);
      stateChanges_.Add(other.stateChanges_);
      if (other.Elapsed != 0L) {
        Elapsed = other.Elapsed;
      }
      if (other.ExecutionStatus != 0) {
        ExecutionStatus = other.ExecutionStatus;
      }
      if (other.DeferredTransaction.Length != 0) {
        DeferredTransaction = other.DeferredTransaction;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (transactionId_ == null) {
              transactionId_ = new global::AElf.Common.Hash();
            }
            input.ReadMessage(transactionId_);
            break;
          }
          case 18: {
            if (retVal_ == null) {
              retVal_ = new global::AElf.Kernel.RetVal();
            }
            input.ReadMessage(retVal_);
            break;
          }
          case 26: {
            StdOut = input.ReadString();
            break;
          }
          case 34: {
            StdErr = input.ReadString();
            break;
          }
          case 42: {
            if (stateHash_ == null) {
              stateHash_ = new global::AElf.Common.Hash();
            }
            input.ReadMessage(stateHash_);
            break;
          }
          case 50: {
            logs_.AddEntriesFrom(input, _repeated_logs_codec);
            break;
          }
          case 58: {
            inlineTransactions_.AddEntriesFrom(input, _repeated_inlineTransactions_codec);
            break;
          }
          case 66: {
            inlineTraces_.AddEntriesFrom(input, _repeated_inlineTraces_codec);
            break;
          }
          case 74: {
            stateChanges_.AddEntriesFrom(input, _repeated_stateChanges_codec);
            break;
          }
          case 80: {
            Elapsed = input.ReadInt64();
            break;
          }
          case 88: {
            executionStatus_ = (global::AElf.Kernel.ExecutionStatus) input.ReadEnum();
            break;
          }
          case 98: {
            DeferredTransaction = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LogEvent : pb::IMessage<LogEvent> {
    private static readonly pb::MessageParser<LogEvent> _parser = new pb::MessageParser<LogEvent>(() => new LogEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.KernelReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogEvent(LogEvent other) : this() {
      address_ = other.address_ != null ? other.address_.Clone() : null;
      topics_ = other.topics_.Clone();
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogEvent Clone() {
      return new LogEvent(this);
    }

    /// <summary>Field number for the "Address" field.</summary>
    public const int AddressFieldNumber = 1;
    private global::AElf.Common.Address address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "Topics" field.</summary>
    public const int TopicsFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_topics_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> topics_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Topics {
      get { return topics_; }
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 3;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Address, other.Address)) return false;
      if(!topics_.Equals(other.topics_)) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (address_ != null) hash ^= Address.GetHashCode();
      hash ^= topics_.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (address_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Address);
      }
      topics_.WriteTo(output, _repeated_topics_codec);
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      size += topics_.CalculateSize(_repeated_topics_codec);
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogEvent other) {
      if (other == null) {
        return;
      }
      if (other.address_ != null) {
        if (address_ == null) {
          address_ = new global::AElf.Common.Address();
        }
        Address.MergeFrom(other.Address);
      }
      topics_.Add(other.topics_);
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (address_ == null) {
              address_ = new global::AElf.Common.Address();
            }
            input.ReadMessage(address_);
            break;
          }
          case 18: {
            topics_.AddEntriesFrom(input, _repeated_topics_codec);
            break;
          }
          case 26: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RetVal : pb::IMessage<RetVal> {
    private static readonly pb::MessageParser<RetVal> _parser = new pb::MessageParser<RetVal>(() => new RetVal());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RetVal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.KernelReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetVal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetVal(RetVal other) : this() {
      type_ = other.type_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetVal Clone() {
      return new RetVal(this);
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::AElf.Kernel.RetVal.Types.RetType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Kernel.RetVal.Types.RetType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 2;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RetVal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RetVal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RetVal other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::AElf.Kernel.RetVal.Types.RetType) input.ReadEnum();
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RetVal message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum RetType {
        [pbr::OriginalName("Void")] Void = 0,
        [pbr::OriginalName("Bool")] Bool = 1,
        [pbr::OriginalName("Int32")] Int32 = 2,
        [pbr::OriginalName("UInt32")] Uint32 = 3,
        [pbr::OriginalName("Int64")] Int64 = 4,
        [pbr::OriginalName("UInt64")] Uint64 = 5,
        [pbr::OriginalName("String")] String = 6,
        [pbr::OriginalName("Bytes")] Bytes = 7,
        [pbr::OriginalName("PbMessage")] PbMessage = 8,
        [pbr::OriginalName("UserType")] UserType = 9,
      }

    }
    #endregion

  }

  public sealed partial class BlockHeaderList : pb::IMessage<BlockHeaderList> {
    private static readonly pb::MessageParser<BlockHeaderList> _parser = new pb::MessageParser<BlockHeaderList>(() => new BlockHeaderList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockHeaderList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.KernelReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockHeaderList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockHeaderList(BlockHeaderList other) : this() {
      headers_ = other.headers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockHeaderList Clone() {
      return new BlockHeaderList(this);
    }

    /// <summary>Field number for the "Headers" field.</summary>
    public const int HeadersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Kernel.BlockHeader> _repeated_headers_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Kernel.BlockHeader.Parser);
    private readonly pbc::RepeatedField<global::AElf.Kernel.BlockHeader> headers_ = new pbc::RepeatedField<global::AElf.Kernel.BlockHeader>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Kernel.BlockHeader> Headers {
      get { return headers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockHeaderList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockHeaderList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!headers_.Equals(other.headers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= headers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      headers_.WriteTo(output, _repeated_headers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += headers_.CalculateSize(_repeated_headers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockHeaderList other) {
      if (other == null) {
        return;
      }
      headers_.Add(other.headers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            headers_.AddEntriesFrom(input, _repeated_headers_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlockHeader : pb::IMessage<BlockHeader> {
    private static readonly pb::MessageParser<BlockHeader> _parser = new pb::MessageParser<BlockHeader>(() => new BlockHeader());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.KernelReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockHeader(BlockHeader other) : this() {
      version_ = other.version_;
      previousBlockHash_ = other.previousBlockHash_ != null ? other.previousBlockHash_.Clone() : null;
      merkleTreeRootOfTransactions_ = other.merkleTreeRootOfTransactions_ != null ? other.merkleTreeRootOfTransactions_.Clone() : null;
      merkleTreeRootOfWorldState_ = other.merkleTreeRootOfWorldState_ != null ? other.merkleTreeRootOfWorldState_.Clone() : null;
      bloom_ = other.bloom_;
      index_ = other.index_;
      sig_ = other.sig_;
      p_ = other.p_;
      time_ = other.time_ != null ? other.time_.Clone() : null;
      chainId_ = other.chainId_ != null ? other.chainId_.Clone() : null;
      sideChainTransactionsRoot_ = other.sideChainTransactionsRoot_ != null ? other.sideChainTransactionsRoot_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockHeader Clone() {
      return new BlockHeader(this);
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 1;
    private int version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "PreviousBlockHash" field.</summary>
    public const int PreviousBlockHashFieldNumber = 2;
    private global::AElf.Common.Hash previousBlockHash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Hash PreviousBlockHash {
      get { return previousBlockHash_; }
      set {
        previousBlockHash_ = value;
      }
    }

    /// <summary>Field number for the "MerkleTreeRootOfTransactions" field.</summary>
    public const int MerkleTreeRootOfTransactionsFieldNumber = 3;
    private global::AElf.Common.Hash merkleTreeRootOfTransactions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Hash MerkleTreeRootOfTransactions {
      get { return merkleTreeRootOfTransactions_; }
      set {
        merkleTreeRootOfTransactions_ = value;
      }
    }

    /// <summary>Field number for the "MerkleTreeRootOfWorldState" field.</summary>
    public const int MerkleTreeRootOfWorldStateFieldNumber = 4;
    private global::AElf.Common.Hash merkleTreeRootOfWorldState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Hash MerkleTreeRootOfWorldState {
      get { return merkleTreeRootOfWorldState_; }
      set {
        merkleTreeRootOfWorldState_ = value;
      }
    }

    /// <summary>Field number for the "Bloom" field.</summary>
    public const int BloomFieldNumber = 5;
    private pb::ByteString bloom_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Bloom {
      get { return bloom_; }
      set {
        bloom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 6;
    private ulong index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Sig" field.</summary>
    public const int SigFieldNumber = 7;
    private pb::ByteString sig_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Sig {
      get { return sig_; }
      set {
        sig_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "P" field.</summary>
    public const int PFieldNumber = 8;
    private pb::ByteString p_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString P {
      get { return p_; }
      set {
        p_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Time" field.</summary>
    public const int TimeFieldNumber = 9;
    private global::Google.Protobuf.WellKnownTypes.Timestamp time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "ChainId" field.</summary>
    public const int ChainIdFieldNumber = 10;
    private global::AElf.Common.Hash chainId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Hash ChainId {
      get { return chainId_; }
      set {
        chainId_ = value;
      }
    }

    /// <summary>Field number for the "SideChainTransactionsRoot" field.</summary>
    public const int SideChainTransactionsRootFieldNumber = 11;
    private global::AElf.Common.Hash sideChainTransactionsRoot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Hash SideChainTransactionsRoot {
      get { return sideChainTransactionsRoot_; }
      set {
        sideChainTransactionsRoot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (!object.Equals(PreviousBlockHash, other.PreviousBlockHash)) return false;
      if (!object.Equals(MerkleTreeRootOfTransactions, other.MerkleTreeRootOfTransactions)) return false;
      if (!object.Equals(MerkleTreeRootOfWorldState, other.MerkleTreeRootOfWorldState)) return false;
      if (Bloom != other.Bloom) return false;
      if (Index != other.Index) return false;
      if (Sig != other.Sig) return false;
      if (P != other.P) return false;
      if (!object.Equals(Time, other.Time)) return false;
      if (!object.Equals(ChainId, other.ChainId)) return false;
      if (!object.Equals(SideChainTransactionsRoot, other.SideChainTransactionsRoot)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0) hash ^= Version.GetHashCode();
      if (previousBlockHash_ != null) hash ^= PreviousBlockHash.GetHashCode();
      if (merkleTreeRootOfTransactions_ != null) hash ^= MerkleTreeRootOfTransactions.GetHashCode();
      if (merkleTreeRootOfWorldState_ != null) hash ^= MerkleTreeRootOfWorldState.GetHashCode();
      if (Bloom.Length != 0) hash ^= Bloom.GetHashCode();
      if (Index != 0UL) hash ^= Index.GetHashCode();
      if (Sig.Length != 0) hash ^= Sig.GetHashCode();
      if (P.Length != 0) hash ^= P.GetHashCode();
      if (time_ != null) hash ^= Time.GetHashCode();
      if (chainId_ != null) hash ^= ChainId.GetHashCode();
      if (sideChainTransactionsRoot_ != null) hash ^= SideChainTransactionsRoot.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Version);
      }
      if (previousBlockHash_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PreviousBlockHash);
      }
      if (merkleTreeRootOfTransactions_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MerkleTreeRootOfTransactions);
      }
      if (merkleTreeRootOfWorldState_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(MerkleTreeRootOfWorldState);
      }
      if (Bloom.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Bloom);
      }
      if (Index != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(Index);
      }
      if (Sig.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(Sig);
      }
      if (P.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(P);
      }
      if (time_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Time);
      }
      if (chainId_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(ChainId);
      }
      if (sideChainTransactionsRoot_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(SideChainTransactionsRoot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (previousBlockHash_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PreviousBlockHash);
      }
      if (merkleTreeRootOfTransactions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MerkleTreeRootOfTransactions);
      }
      if (merkleTreeRootOfWorldState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MerkleTreeRootOfWorldState);
      }
      if (Bloom.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Bloom);
      }
      if (Index != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Index);
      }
      if (Sig.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Sig);
      }
      if (P.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(P);
      }
      if (time_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Time);
      }
      if (chainId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChainId);
      }
      if (sideChainTransactionsRoot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SideChainTransactionsRoot);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockHeader other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.previousBlockHash_ != null) {
        if (previousBlockHash_ == null) {
          previousBlockHash_ = new global::AElf.Common.Hash();
        }
        PreviousBlockHash.MergeFrom(other.PreviousBlockHash);
      }
      if (other.merkleTreeRootOfTransactions_ != null) {
        if (merkleTreeRootOfTransactions_ == null) {
          merkleTreeRootOfTransactions_ = new global::AElf.Common.Hash();
        }
        MerkleTreeRootOfTransactions.MergeFrom(other.MerkleTreeRootOfTransactions);
      }
      if (other.merkleTreeRootOfWorldState_ != null) {
        if (merkleTreeRootOfWorldState_ == null) {
          merkleTreeRootOfWorldState_ = new global::AElf.Common.Hash();
        }
        MerkleTreeRootOfWorldState.MergeFrom(other.MerkleTreeRootOfWorldState);
      }
      if (other.Bloom.Length != 0) {
        Bloom = other.Bloom;
      }
      if (other.Index != 0UL) {
        Index = other.Index;
      }
      if (other.Sig.Length != 0) {
        Sig = other.Sig;
      }
      if (other.P.Length != 0) {
        P = other.P;
      }
      if (other.time_ != null) {
        if (time_ == null) {
          time_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Time.MergeFrom(other.Time);
      }
      if (other.chainId_ != null) {
        if (chainId_ == null) {
          chainId_ = new global::AElf.Common.Hash();
        }
        ChainId.MergeFrom(other.ChainId);
      }
      if (other.sideChainTransactionsRoot_ != null) {
        if (sideChainTransactionsRoot_ == null) {
          sideChainTransactionsRoot_ = new global::AElf.Common.Hash();
        }
        SideChainTransactionsRoot.MergeFrom(other.SideChainTransactionsRoot);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Version = input.ReadInt32();
            break;
          }
          case 18: {
            if (previousBlockHash_ == null) {
              previousBlockHash_ = new global::AElf.Common.Hash();
            }
            input.ReadMessage(previousBlockHash_);
            break;
          }
          case 26: {
            if (merkleTreeRootOfTransactions_ == null) {
              merkleTreeRootOfTransactions_ = new global::AElf.Common.Hash();
            }
            input.ReadMessage(merkleTreeRootOfTransactions_);
            break;
          }
          case 34: {
            if (merkleTreeRootOfWorldState_ == null) {
              merkleTreeRootOfWorldState_ = new global::AElf.Common.Hash();
            }
            input.ReadMessage(merkleTreeRootOfWorldState_);
            break;
          }
          case 42: {
            Bloom = input.ReadBytes();
            break;
          }
          case 48: {
            Index = input.ReadUInt64();
            break;
          }
          case 58: {
            Sig = input.ReadBytes();
            break;
          }
          case 66: {
            P = input.ReadBytes();
            break;
          }
          case 74: {
            if (time_ == null) {
              time_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(time_);
            break;
          }
          case 82: {
            if (chainId_ == null) {
              chainId_ = new global::AElf.Common.Hash();
            }
            input.ReadMessage(chainId_);
            break;
          }
          case 90: {
            if (sideChainTransactionsRoot_ == null) {
              sideChainTransactionsRoot_ = new global::AElf.Common.Hash();
            }
            input.ReadMessage(sideChainTransactionsRoot_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlockBody : pb::IMessage<BlockBody> {
    private static readonly pb::MessageParser<BlockBody> _parser = new pb::MessageParser<BlockBody>(() => new BlockBody());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockBody> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.KernelReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockBody() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockBody(BlockBody other) : this() {
      blockHeader_ = other.blockHeader_ != null ? other.blockHeader_.Clone() : null;
      transactions_ = other.transactions_.Clone();
      transactionList_ = other.transactionList_.Clone();
      indexedInfo_ = other.indexedInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockBody Clone() {
      return new BlockBody(this);
    }

    /// <summary>Field number for the "BlockHeader" field.</summary>
    public const int BlockHeaderFieldNumber = 1;
    private global::AElf.Common.Hash blockHeader_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Hash BlockHeader {
      get { return blockHeader_; }
      set {
        blockHeader_ = value;
      }
    }

    /// <summary>Field number for the "Transactions" field.</summary>
    public const int TransactionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::AElf.Common.Hash> _repeated_transactions_codec
        = pb::FieldCodec.ForMessage(18, global::AElf.Common.Hash.Parser);
    private readonly pbc::RepeatedField<global::AElf.Common.Hash> transactions_ = new pbc::RepeatedField<global::AElf.Common.Hash>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Common.Hash> Transactions {
      get { return transactions_; }
    }

    /// <summary>Field number for the "TransactionList" field.</summary>
    public const int TransactionListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::AElf.Kernel.Transaction> _repeated_transactionList_codec
        = pb::FieldCodec.ForMessage(26, global::AElf.Kernel.Transaction.Parser);
    private readonly pbc::RepeatedField<global::AElf.Kernel.Transaction> transactionList_ = new pbc::RepeatedField<global::AElf.Kernel.Transaction>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Kernel.Transaction> TransactionList {
      get { return transactionList_; }
    }

    /// <summary>Field number for the "IndexedInfo" field.</summary>
    public const int IndexedInfoFieldNumber = 4;
    private static readonly pb::FieldCodec<global::AElf.Kernel.SideChainBlockInfo> _repeated_indexedInfo_codec
        = pb::FieldCodec.ForMessage(34, global::AElf.Kernel.SideChainBlockInfo.Parser);
    private readonly pbc::RepeatedField<global::AElf.Kernel.SideChainBlockInfo> indexedInfo_ = new pbc::RepeatedField<global::AElf.Kernel.SideChainBlockInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Kernel.SideChainBlockInfo> IndexedInfo {
      get { return indexedInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockBody);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockBody other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BlockHeader, other.BlockHeader)) return false;
      if(!transactions_.Equals(other.transactions_)) return false;
      if(!transactionList_.Equals(other.transactionList_)) return false;
      if(!indexedInfo_.Equals(other.indexedInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (blockHeader_ != null) hash ^= BlockHeader.GetHashCode();
      hash ^= transactions_.GetHashCode();
      hash ^= transactionList_.GetHashCode();
      hash ^= indexedInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (blockHeader_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BlockHeader);
      }
      transactions_.WriteTo(output, _repeated_transactions_codec);
      transactionList_.WriteTo(output, _repeated_transactionList_codec);
      indexedInfo_.WriteTo(output, _repeated_indexedInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (blockHeader_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlockHeader);
      }
      size += transactions_.CalculateSize(_repeated_transactions_codec);
      size += transactionList_.CalculateSize(_repeated_transactionList_codec);
      size += indexedInfo_.CalculateSize(_repeated_indexedInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockBody other) {
      if (other == null) {
        return;
      }
      if (other.blockHeader_ != null) {
        if (blockHeader_ == null) {
          blockHeader_ = new global::AElf.Common.Hash();
        }
        BlockHeader.MergeFrom(other.BlockHeader);
      }
      transactions_.Add(other.transactions_);
      transactionList_.Add(other.transactionList_);
      indexedInfo_.Add(other.indexedInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (blockHeader_ == null) {
              blockHeader_ = new global::AElf.Common.Hash();
            }
            input.ReadMessage(blockHeader_);
            break;
          }
          case 18: {
            transactions_.AddEntriesFrom(input, _repeated_transactions_codec);
            break;
          }
          case 26: {
            transactionList_.AddEntriesFrom(input, _repeated_transactionList_codec);
            break;
          }
          case 34: {
            indexedInfo_.AddEntriesFrom(input, _repeated_indexedInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Block : pb::IMessage<Block> {
    private static readonly pb::MessageParser<Block> _parser = new pb::MessageParser<Block>(() => new Block());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Block> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.KernelReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block(Block other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      body_ = other.body_ != null ? other.body_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block Clone() {
      return new Block(this);
    }

    /// <summary>Field number for the "Header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::AElf.Kernel.BlockHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Kernel.BlockHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "Body" field.</summary>
    public const int BodyFieldNumber = 2;
    private global::AElf.Kernel.BlockBody body_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Kernel.BlockBody Body {
      get { return body_; }
      set {
        body_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Block);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Block other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Body, other.Body)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (body_ != null) hash ^= Body.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (body_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Body);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (body_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Block other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::AElf.Kernel.BlockHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.body_ != null) {
        if (body_ == null) {
          body_ = new global::AElf.Kernel.BlockBody();
        }
        Body.MergeFrom(other.Body);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::AElf.Kernel.BlockHeader();
            }
            input.ReadMessage(header_);
            break;
          }
          case 18: {
            if (body_ == null) {
              body_ = new global::AElf.Kernel.BlockBody();
            }
            input.ReadMessage(body_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SmartContractRegistration : pb::IMessage<SmartContractRegistration> {
    private static readonly pb::MessageParser<SmartContractRegistration> _parser = new pb::MessageParser<SmartContractRegistration>(() => new SmartContractRegistration());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SmartContractRegistration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.KernelReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmartContractRegistration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmartContractRegistration(SmartContractRegistration other) : this() {
      category_ = other.category_;
      contractHash_ = other.contractHash_ != null ? other.contractHash_.Clone() : null;
      contractBytes_ = other.contractBytes_;
      serialNumber_ = other.serialNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmartContractRegistration Clone() {
      return new SmartContractRegistration(this);
    }

    /// <summary>Field number for the "Category" field.</summary>
    public const int CategoryFieldNumber = 1;
    private int category_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Category {
      get { return category_; }
      set {
        category_ = value;
      }
    }

    /// <summary>Field number for the "ContractHash" field.</summary>
    public const int ContractHashFieldNumber = 2;
    private global::AElf.Common.Hash contractHash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Hash ContractHash {
      get { return contractHash_; }
      set {
        contractHash_ = value;
      }
    }

    /// <summary>Field number for the "ContractBytes" field.</summary>
    public const int ContractBytesFieldNumber = 3;
    private pb::ByteString contractBytes_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ContractBytes {
      get { return contractBytes_; }
      set {
        contractBytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SerialNumber" field.</summary>
    public const int SerialNumberFieldNumber = 4;
    private ulong serialNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SerialNumber {
      get { return serialNumber_; }
      set {
        serialNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SmartContractRegistration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SmartContractRegistration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Category != other.Category) return false;
      if (!object.Equals(ContractHash, other.ContractHash)) return false;
      if (ContractBytes != other.ContractBytes) return false;
      if (SerialNumber != other.SerialNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Category != 0) hash ^= Category.GetHashCode();
      if (contractHash_ != null) hash ^= ContractHash.GetHashCode();
      if (ContractBytes.Length != 0) hash ^= ContractBytes.GetHashCode();
      if (SerialNumber != 0UL) hash ^= SerialNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Category != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Category);
      }
      if (contractHash_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ContractHash);
      }
      if (ContractBytes.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ContractBytes);
      }
      if (SerialNumber != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(SerialNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Category != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Category);
      }
      if (contractHash_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContractHash);
      }
      if (ContractBytes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ContractBytes);
      }
      if (SerialNumber != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SerialNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SmartContractRegistration other) {
      if (other == null) {
        return;
      }
      if (other.Category != 0) {
        Category = other.Category;
      }
      if (other.contractHash_ != null) {
        if (contractHash_ == null) {
          contractHash_ = new global::AElf.Common.Hash();
        }
        ContractHash.MergeFrom(other.ContractHash);
      }
      if (other.ContractBytes.Length != 0) {
        ContractBytes = other.ContractBytes;
      }
      if (other.SerialNumber != 0UL) {
        SerialNumber = other.SerialNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Category = input.ReadInt32();
            break;
          }
          case 18: {
            if (contractHash_ == null) {
              contractHash_ = new global::AElf.Common.Hash();
            }
            input.ReadMessage(contractHash_);
            break;
          }
          case 26: {
            ContractBytes = input.ReadBytes();
            break;
          }
          case 32: {
            SerialNumber = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SmartContractDeployment : pb::IMessage<SmartContractDeployment> {
    private static readonly pb::MessageParser<SmartContractDeployment> _parser = new pb::MessageParser<SmartContractDeployment>(() => new SmartContractDeployment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SmartContractDeployment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.KernelReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmartContractDeployment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmartContractDeployment(SmartContractDeployment other) : this() {
      contractHash_ = other.contractHash_ != null ? other.contractHash_.Clone() : null;
      caller_ = other.caller_ != null ? other.caller_.Clone() : null;
      constructParams_ = other.constructParams_;
      incrementId_ = other.incrementId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmartContractDeployment Clone() {
      return new SmartContractDeployment(this);
    }

    /// <summary>Field number for the "ContractHash" field.</summary>
    public const int ContractHashFieldNumber = 1;
    private global::AElf.Common.Hash contractHash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Hash ContractHash {
      get { return contractHash_; }
      set {
        contractHash_ = value;
      }
    }

    /// <summary>Field number for the "Caller" field.</summary>
    public const int CallerFieldNumber = 2;
    private global::AElf.Common.Hash caller_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Hash Caller {
      get { return caller_; }
      set {
        caller_ = value;
      }
    }

    /// <summary>Field number for the "ConstructParams" field.</summary>
    public const int ConstructParamsFieldNumber = 3;
    private pb::ByteString constructParams_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ConstructParams {
      get { return constructParams_; }
      set {
        constructParams_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IncrementId" field.</summary>
    public const int IncrementIdFieldNumber = 4;
    private ulong incrementId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong IncrementId {
      get { return incrementId_; }
      set {
        incrementId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SmartContractDeployment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SmartContractDeployment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ContractHash, other.ContractHash)) return false;
      if (!object.Equals(Caller, other.Caller)) return false;
      if (ConstructParams != other.ConstructParams) return false;
      if (IncrementId != other.IncrementId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (contractHash_ != null) hash ^= ContractHash.GetHashCode();
      if (caller_ != null) hash ^= Caller.GetHashCode();
      if (ConstructParams.Length != 0) hash ^= ConstructParams.GetHashCode();
      if (IncrementId != 0UL) hash ^= IncrementId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (contractHash_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ContractHash);
      }
      if (caller_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Caller);
      }
      if (ConstructParams.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ConstructParams);
      }
      if (IncrementId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(IncrementId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (contractHash_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContractHash);
      }
      if (caller_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Caller);
      }
      if (ConstructParams.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ConstructParams);
      }
      if (IncrementId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(IncrementId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SmartContractDeployment other) {
      if (other == null) {
        return;
      }
      if (other.contractHash_ != null) {
        if (contractHash_ == null) {
          contractHash_ = new global::AElf.Common.Hash();
        }
        ContractHash.MergeFrom(other.ContractHash);
      }
      if (other.caller_ != null) {
        if (caller_ == null) {
          caller_ = new global::AElf.Common.Hash();
        }
        Caller.MergeFrom(other.Caller);
      }
      if (other.ConstructParams.Length != 0) {
        ConstructParams = other.ConstructParams;
      }
      if (other.IncrementId != 0UL) {
        IncrementId = other.IncrementId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (contractHash_ == null) {
              contractHash_ = new global::AElf.Common.Hash();
            }
            input.ReadMessage(contractHash_);
            break;
          }
          case 18: {
            if (caller_ == null) {
              caller_ = new global::AElf.Common.Hash();
            }
            input.ReadMessage(caller_);
            break;
          }
          case 26: {
            ConstructParams = input.ReadBytes();
            break;
          }
          case 32: {
            IncrementId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Parameters : pb::IMessage<Parameters> {
    private static readonly pb::MessageParser<Parameters> _parser = new pb::MessageParser<Parameters>(() => new Parameters());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Parameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.KernelReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Parameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Parameters(Parameters other) : this() {
      params_ = other.params_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Parameters Clone() {
      return new Parameters(this);
    }

    /// <summary>Field number for the "Params" field.</summary>
    public const int ParamsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Kernel.Param> _repeated_params_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Kernel.Param.Parser);
    private readonly pbc::RepeatedField<global::AElf.Kernel.Param> params_ = new pbc::RepeatedField<global::AElf.Kernel.Param>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Kernel.Param> Params {
      get { return params_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Parameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Parameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!params_.Equals(other.params_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= params_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      params_.WriteTo(output, _repeated_params_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += params_.CalculateSize(_repeated_params_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Parameters other) {
      if (other == null) {
        return;
      }
      params_.Add(other.params_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Param : pb::IMessage<Param> {
    private static readonly pb::MessageParser<Param> _parser = new pb::MessageParser<Param>(() => new Param());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Param> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.KernelReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Param() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Param(Param other) : this() {
      switch (other.DataCase) {
        case DataOneofCase.IntVal:
          IntVal = other.IntVal;
          break;
        case DataOneofCase.UintVal:
          UintVal = other.UintVal;
          break;
        case DataOneofCase.LongVal:
          LongVal = other.LongVal;
          break;
        case DataOneofCase.UlongVal:
          UlongVal = other.UlongVal;
          break;
        case DataOneofCase.BoolVal:
          BoolVal = other.BoolVal;
          break;
        case DataOneofCase.BytesVal:
          BytesVal = other.BytesVal;
          break;
        case DataOneofCase.StrVal:
          StrVal = other.StrVal;
          break;
        case DataOneofCase.DVal:
          DVal = other.DVal;
          break;
        case DataOneofCase.HashVal:
          HashVal = other.HashVal.Clone();
          break;
        case DataOneofCase.RegisterVal:
          RegisterVal = other.RegisterVal.Clone();
          break;
        case DataOneofCase.DeploymentVal:
          DeploymentVal = other.DeploymentVal.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Param Clone() {
      return new Param(this);
    }

    /// <summary>Field number for the "intVal" field.</summary>
    public const int IntValFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IntVal {
      get { return dataCase_ == DataOneofCase.IntVal ? (int) data_ : 0; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.IntVal;
      }
    }

    /// <summary>Field number for the "uintVal" field.</summary>
    public const int UintValFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UintVal {
      get { return dataCase_ == DataOneofCase.UintVal ? (uint) data_ : 0; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.UintVal;
      }
    }

    /// <summary>Field number for the "longVal" field.</summary>
    public const int LongValFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LongVal {
      get { return dataCase_ == DataOneofCase.LongVal ? (long) data_ : 0L; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.LongVal;
      }
    }

    /// <summary>Field number for the "ulongVal" field.</summary>
    public const int UlongValFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UlongVal {
      get { return dataCase_ == DataOneofCase.UlongVal ? (ulong) data_ : 0UL; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.UlongVal;
      }
    }

    /// <summary>Field number for the "boolVal" field.</summary>
    public const int BoolValFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BoolVal {
      get { return dataCase_ == DataOneofCase.BoolVal ? (bool) data_ : false; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.BoolVal;
      }
    }

    /// <summary>Field number for the "bytesVal" field.</summary>
    public const int BytesValFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BytesVal {
      get { return dataCase_ == DataOneofCase.BytesVal ? (pb::ByteString) data_ : pb::ByteString.Empty; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        dataCase_ = DataOneofCase.BytesVal;
      }
    }

    /// <summary>Field number for the "strVal" field.</summary>
    public const int StrValFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StrVal {
      get { return dataCase_ == DataOneofCase.StrVal ? (string) data_ : ""; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        dataCase_ = DataOneofCase.StrVal;
      }
    }

    /// <summary>Field number for the "dVal" field.</summary>
    public const int DValFieldNumber = 8;
    /// <summary>
    /// Maybe don't allow floating point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DVal {
      get { return dataCase_ == DataOneofCase.DVal ? (double) data_ : 0D; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.DVal;
      }
    }

    /// <summary>Field number for the "hashVal" field.</summary>
    public const int HashValFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Hash HashVal {
      get { return dataCase_ == DataOneofCase.HashVal ? (global::AElf.Common.Hash) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.HashVal;
      }
    }

    /// <summary>Field number for the "registerVal" field.</summary>
    public const int RegisterValFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Kernel.SmartContractRegistration RegisterVal {
      get { return dataCase_ == DataOneofCase.RegisterVal ? (global::AElf.Kernel.SmartContractRegistration) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.RegisterVal;
      }
    }

    /// <summary>Field number for the "deploymentVal" field.</summary>
    public const int DeploymentValFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Kernel.SmartContractDeployment DeploymentVal {
      get { return dataCase_ == DataOneofCase.DeploymentVal ? (global::AElf.Kernel.SmartContractDeployment) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.DeploymentVal;
      }
    }

    private object data_;
    /// <summary>Enum of possible cases for the "data" oneof.</summary>
    public enum DataOneofCase {
      None = 0,
      IntVal = 1,
      UintVal = 2,
      LongVal = 3,
      UlongVal = 4,
      BoolVal = 5,
      BytesVal = 6,
      StrVal = 7,
      DVal = 8,
      HashVal = 9,
      RegisterVal = 10,
      DeploymentVal = 11,
    }
    private DataOneofCase dataCase_ = DataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOneofCase DataCase {
      get { return dataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      dataCase_ = DataOneofCase.None;
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Param);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Param other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IntVal != other.IntVal) return false;
      if (UintVal != other.UintVal) return false;
      if (LongVal != other.LongVal) return false;
      if (UlongVal != other.UlongVal) return false;
      if (BoolVal != other.BoolVal) return false;
      if (BytesVal != other.BytesVal) return false;
      if (StrVal != other.StrVal) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DVal, other.DVal)) return false;
      if (!object.Equals(HashVal, other.HashVal)) return false;
      if (!object.Equals(RegisterVal, other.RegisterVal)) return false;
      if (!object.Equals(DeploymentVal, other.DeploymentVal)) return false;
      if (DataCase != other.DataCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dataCase_ == DataOneofCase.IntVal) hash ^= IntVal.GetHashCode();
      if (dataCase_ == DataOneofCase.UintVal) hash ^= UintVal.GetHashCode();
      if (dataCase_ == DataOneofCase.LongVal) hash ^= LongVal.GetHashCode();
      if (dataCase_ == DataOneofCase.UlongVal) hash ^= UlongVal.GetHashCode();
      if (dataCase_ == DataOneofCase.BoolVal) hash ^= BoolVal.GetHashCode();
      if (dataCase_ == DataOneofCase.BytesVal) hash ^= BytesVal.GetHashCode();
      if (dataCase_ == DataOneofCase.StrVal) hash ^= StrVal.GetHashCode();
      if (dataCase_ == DataOneofCase.DVal) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DVal);
      if (dataCase_ == DataOneofCase.HashVal) hash ^= HashVal.GetHashCode();
      if (dataCase_ == DataOneofCase.RegisterVal) hash ^= RegisterVal.GetHashCode();
      if (dataCase_ == DataOneofCase.DeploymentVal) hash ^= DeploymentVal.GetHashCode();
      hash ^= (int) dataCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dataCase_ == DataOneofCase.IntVal) {
        output.WriteRawTag(8);
        output.WriteInt32(IntVal);
      }
      if (dataCase_ == DataOneofCase.UintVal) {
        output.WriteRawTag(16);
        output.WriteUInt32(UintVal);
      }
      if (dataCase_ == DataOneofCase.LongVal) {
        output.WriteRawTag(24);
        output.WriteInt64(LongVal);
      }
      if (dataCase_ == DataOneofCase.UlongVal) {
        output.WriteRawTag(32);
        output.WriteUInt64(UlongVal);
      }
      if (dataCase_ == DataOneofCase.BoolVal) {
        output.WriteRawTag(40);
        output.WriteBool(BoolVal);
      }
      if (dataCase_ == DataOneofCase.BytesVal) {
        output.WriteRawTag(50);
        output.WriteBytes(BytesVal);
      }
      if (dataCase_ == DataOneofCase.StrVal) {
        output.WriteRawTag(58);
        output.WriteString(StrVal);
      }
      if (dataCase_ == DataOneofCase.DVal) {
        output.WriteRawTag(65);
        output.WriteDouble(DVal);
      }
      if (dataCase_ == DataOneofCase.HashVal) {
        output.WriteRawTag(74);
        output.WriteMessage(HashVal);
      }
      if (dataCase_ == DataOneofCase.RegisterVal) {
        output.WriteRawTag(82);
        output.WriteMessage(RegisterVal);
      }
      if (dataCase_ == DataOneofCase.DeploymentVal) {
        output.WriteRawTag(90);
        output.WriteMessage(DeploymentVal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dataCase_ == DataOneofCase.IntVal) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IntVal);
      }
      if (dataCase_ == DataOneofCase.UintVal) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UintVal);
      }
      if (dataCase_ == DataOneofCase.LongVal) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LongVal);
      }
      if (dataCase_ == DataOneofCase.UlongVal) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UlongVal);
      }
      if (dataCase_ == DataOneofCase.BoolVal) {
        size += 1 + 1;
      }
      if (dataCase_ == DataOneofCase.BytesVal) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BytesVal);
      }
      if (dataCase_ == DataOneofCase.StrVal) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StrVal);
      }
      if (dataCase_ == DataOneofCase.DVal) {
        size += 1 + 8;
      }
      if (dataCase_ == DataOneofCase.HashVal) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HashVal);
      }
      if (dataCase_ == DataOneofCase.RegisterVal) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RegisterVal);
      }
      if (dataCase_ == DataOneofCase.DeploymentVal) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeploymentVal);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Param other) {
      if (other == null) {
        return;
      }
      switch (other.DataCase) {
        case DataOneofCase.IntVal:
          IntVal = other.IntVal;
          break;
        case DataOneofCase.UintVal:
          UintVal = other.UintVal;
          break;
        case DataOneofCase.LongVal:
          LongVal = other.LongVal;
          break;
        case DataOneofCase.UlongVal:
          UlongVal = other.UlongVal;
          break;
        case DataOneofCase.BoolVal:
          BoolVal = other.BoolVal;
          break;
        case DataOneofCase.BytesVal:
          BytesVal = other.BytesVal;
          break;
        case DataOneofCase.StrVal:
          StrVal = other.StrVal;
          break;
        case DataOneofCase.DVal:
          DVal = other.DVal;
          break;
        case DataOneofCase.HashVal:
          if (HashVal == null) {
            HashVal = new global::AElf.Common.Hash();
          }
          HashVal.MergeFrom(other.HashVal);
          break;
        case DataOneofCase.RegisterVal:
          if (RegisterVal == null) {
            RegisterVal = new global::AElf.Kernel.SmartContractRegistration();
          }
          RegisterVal.MergeFrom(other.RegisterVal);
          break;
        case DataOneofCase.DeploymentVal:
          if (DeploymentVal == null) {
            DeploymentVal = new global::AElf.Kernel.SmartContractDeployment();
          }
          DeploymentVal.MergeFrom(other.DeploymentVal);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IntVal = input.ReadInt32();
            break;
          }
          case 16: {
            UintVal = input.ReadUInt32();
            break;
          }
          case 24: {
            LongVal = input.ReadInt64();
            break;
          }
          case 32: {
            UlongVal = input.ReadUInt64();
            break;
          }
          case 40: {
            BoolVal = input.ReadBool();
            break;
          }
          case 50: {
            BytesVal = input.ReadBytes();
            break;
          }
          case 58: {
            StrVal = input.ReadString();
            break;
          }
          case 65: {
            DVal = input.ReadDouble();
            break;
          }
          case 74: {
            global::AElf.Common.Hash subBuilder = new global::AElf.Common.Hash();
            if (dataCase_ == DataOneofCase.HashVal) {
              subBuilder.MergeFrom(HashVal);
            }
            input.ReadMessage(subBuilder);
            HashVal = subBuilder;
            break;
          }
          case 82: {
            global::AElf.Kernel.SmartContractRegistration subBuilder = new global::AElf.Kernel.SmartContractRegistration();
            if (dataCase_ == DataOneofCase.RegisterVal) {
              subBuilder.MergeFrom(RegisterVal);
            }
            input.ReadMessage(subBuilder);
            RegisterVal = subBuilder;
            break;
          }
          case 90: {
            global::AElf.Kernel.SmartContractDeployment subBuilder = new global::AElf.Kernel.SmartContractDeployment();
            if (dataCase_ == DataOneofCase.DeploymentVal) {
              subBuilder.MergeFrom(DeploymentVal);
            }
            input.ReadMessage(subBuilder);
            DeploymentVal = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class SmartContractInvokeContext : pb::IMessage<SmartContractInvokeContext> {
    private static readonly pb::MessageParser<SmartContractInvokeContext> _parser = new pb::MessageParser<SmartContractInvokeContext>(() => new SmartContractInvokeContext());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SmartContractInvokeContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.KernelReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmartContractInvokeContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmartContractInvokeContext(SmartContractInvokeContext other) : this() {
      caller_ = other.caller_ != null ? other.caller_.Clone() : null;
      incrementId_ = other.incrementId_;
      methodName_ = other.methodName_;
      params_ = other.params_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmartContractInvokeContext Clone() {
      return new SmartContractInvokeContext(this);
    }

    /// <summary>Field number for the "Caller" field.</summary>
    public const int CallerFieldNumber = 1;
    private global::AElf.Common.Hash caller_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Hash Caller {
      get { return caller_; }
      set {
        caller_ = value;
      }
    }

    /// <summary>Field number for the "IncrementId" field.</summary>
    public const int IncrementIdFieldNumber = 2;
    private ulong incrementId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong IncrementId {
      get { return incrementId_; }
      set {
        incrementId_ = value;
      }
    }

    /// <summary>Field number for the "MethodName" field.</summary>
    public const int MethodNameFieldNumber = 3;
    private string methodName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MethodName {
      get { return methodName_; }
      set {
        methodName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Params" field.</summary>
    public const int ParamsFieldNumber = 4;
    private pb::ByteString params_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Params {
      get { return params_; }
      set {
        params_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SmartContractInvokeContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SmartContractInvokeContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Caller, other.Caller)) return false;
      if (IncrementId != other.IncrementId) return false;
      if (MethodName != other.MethodName) return false;
      if (Params != other.Params) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (caller_ != null) hash ^= Caller.GetHashCode();
      if (IncrementId != 0UL) hash ^= IncrementId.GetHashCode();
      if (MethodName.Length != 0) hash ^= MethodName.GetHashCode();
      if (Params.Length != 0) hash ^= Params.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (caller_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Caller);
      }
      if (IncrementId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(IncrementId);
      }
      if (MethodName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MethodName);
      }
      if (Params.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Params);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (caller_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Caller);
      }
      if (IncrementId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(IncrementId);
      }
      if (MethodName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MethodName);
      }
      if (Params.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Params);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SmartContractInvokeContext other) {
      if (other == null) {
        return;
      }
      if (other.caller_ != null) {
        if (caller_ == null) {
          caller_ = new global::AElf.Common.Hash();
        }
        Caller.MergeFrom(other.Caller);
      }
      if (other.IncrementId != 0UL) {
        IncrementId = other.IncrementId;
      }
      if (other.MethodName.Length != 0) {
        MethodName = other.MethodName;
      }
      if (other.Params.Length != 0) {
        Params = other.Params;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (caller_ == null) {
              caller_ = new global::AElf.Common.Hash();
            }
            input.ReadMessage(caller_);
            break;
          }
          case 16: {
            IncrementId = input.ReadUInt64();
            break;
          }
          case 26: {
            MethodName = input.ReadString();
            break;
          }
          case 34: {
            Params = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataItem : pb::IMessage<DataItem> {
    private static readonly pb::MessageParser<DataItem> _parser = new pb::MessageParser<DataItem>(() => new DataItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.KernelReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataItem(DataItem other) : this() {
      resourcePath_ = other.resourcePath_ != null ? other.resourcePath_.Clone() : null;
      resourcePointer_ = other.resourcePointer_ != null ? other.resourcePointer_.Clone() : null;
      stateMerkleTreeLeaf_ = other.stateMerkleTreeLeaf_ != null ? other.stateMerkleTreeLeaf_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataItem Clone() {
      return new DataItem(this);
    }

    /// <summary>Field number for the "ResourcePath" field.</summary>
    public const int ResourcePathFieldNumber = 1;
    private global::AElf.Common.Hash resourcePath_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Hash ResourcePath {
      get { return resourcePath_; }
      set {
        resourcePath_ = value;
      }
    }

    /// <summary>Field number for the "ResourcePointer" field.</summary>
    public const int ResourcePointerFieldNumber = 2;
    private global::AElf.Common.Hash resourcePointer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Hash ResourcePointer {
      get { return resourcePointer_; }
      set {
        resourcePointer_ = value;
      }
    }

    /// <summary>Field number for the "StateMerkleTreeLeaf" field.</summary>
    public const int StateMerkleTreeLeafFieldNumber = 3;
    private global::AElf.Common.Hash stateMerkleTreeLeaf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Hash StateMerkleTreeLeaf {
      get { return stateMerkleTreeLeaf_; }
      set {
        stateMerkleTreeLeaf_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ResourcePath, other.ResourcePath)) return false;
      if (!object.Equals(ResourcePointer, other.ResourcePointer)) return false;
      if (!object.Equals(StateMerkleTreeLeaf, other.StateMerkleTreeLeaf)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resourcePath_ != null) hash ^= ResourcePath.GetHashCode();
      if (resourcePointer_ != null) hash ^= ResourcePointer.GetHashCode();
      if (stateMerkleTreeLeaf_ != null) hash ^= StateMerkleTreeLeaf.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (resourcePath_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ResourcePath);
      }
      if (resourcePointer_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ResourcePointer);
      }
      if (stateMerkleTreeLeaf_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(StateMerkleTreeLeaf);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resourcePath_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResourcePath);
      }
      if (resourcePointer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResourcePointer);
      }
      if (stateMerkleTreeLeaf_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StateMerkleTreeLeaf);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataItem other) {
      if (other == null) {
        return;
      }
      if (other.resourcePath_ != null) {
        if (resourcePath_ == null) {
          resourcePath_ = new global::AElf.Common.Hash();
        }
        ResourcePath.MergeFrom(other.ResourcePath);
      }
      if (other.resourcePointer_ != null) {
        if (resourcePointer_ == null) {
          resourcePointer_ = new global::AElf.Common.Hash();
        }
        ResourcePointer.MergeFrom(other.ResourcePointer);
      }
      if (other.stateMerkleTreeLeaf_ != null) {
        if (stateMerkleTreeLeaf_ == null) {
          stateMerkleTreeLeaf_ = new global::AElf.Common.Hash();
        }
        StateMerkleTreeLeaf.MergeFrom(other.StateMerkleTreeLeaf);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (resourcePath_ == null) {
              resourcePath_ = new global::AElf.Common.Hash();
            }
            input.ReadMessage(resourcePath_);
            break;
          }
          case 18: {
            if (resourcePointer_ == null) {
              resourcePointer_ = new global::AElf.Common.Hash();
            }
            input.ReadMessage(resourcePointer_);
            break;
          }
          case 26: {
            if (stateMerkleTreeLeaf_ == null) {
              stateMerkleTreeLeaf_ = new global::AElf.Common.Hash();
            }
            input.ReadMessage(stateMerkleTreeLeaf_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class WorldState : pb::IMessage<WorldState> {
    private static readonly pb::MessageParser<WorldState> _parser = new pb::MessageParser<WorldState>(() => new WorldState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorldState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.KernelReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldState(WorldState other) : this() {
      data_ = other.data_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorldState Clone() {
      return new WorldState(this);
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Kernel.DataItem> _repeated_data_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Kernel.DataItem.Parser);
    private readonly pbc::RepeatedField<global::AElf.Kernel.DataItem> data_ = new pbc::RepeatedField<global::AElf.Kernel.DataItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Kernel.DataItem> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorldState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorldState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!data_.Equals(other.data_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= data_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      data_.WriteTo(output, _repeated_data_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += data_.CalculateSize(_repeated_data_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorldState other) {
      if (other == null) {
        return;
      }
      data_.Add(other.data_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Chain : pb::IMessage<Chain> {
    private static readonly pb::MessageParser<Chain> _parser = new pb::MessageParser<Chain>(() => new Chain());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Chain> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.KernelReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chain() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chain(Chain other) : this() {
      id_ = other.id_ != null ? other.id_.Clone() : null;
      genesisBlockHash_ = other.genesisBlockHash_ != null ? other.genesisBlockHash_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chain Clone() {
      return new Chain(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::AElf.Common.Hash id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Hash Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "GenesisBlockHash" field.</summary>
    public const int GenesisBlockHashFieldNumber = 2;
    private global::AElf.Common.Hash genesisBlockHash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Hash GenesisBlockHash {
      get { return genesisBlockHash_; }
      set {
        genesisBlockHash_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Chain);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Chain other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (!object.Equals(GenesisBlockHash, other.GenesisBlockHash)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (genesisBlockHash_ != null) hash ^= GenesisBlockHash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (genesisBlockHash_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GenesisBlockHash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (genesisBlockHash_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GenesisBlockHash);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Chain other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          id_ = new global::AElf.Common.Hash();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.genesisBlockHash_ != null) {
        if (genesisBlockHash_ == null) {
          genesisBlockHash_ = new global::AElf.Common.Hash();
        }
        GenesisBlockHash.MergeFrom(other.GenesisBlockHash);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              id_ = new global::AElf.Common.Hash();
            }
            input.ReadMessage(id_);
            break;
          }
          case 18: {
            if (genesisBlockHash_ == null) {
              genesisBlockHash_ = new global::AElf.Common.Hash();
            }
            input.ReadMessage(genesisBlockHash_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Key : pb::IMessage<Key> {
    private static readonly pb::MessageParser<Key> _parser = new pb::MessageParser<Key>(() => new Key());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Key> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.KernelReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Key() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Key(Key other) : this() {
      value_ = other.value_;
      type_ = other.type_;
      hashType_ = other.hashType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Key Clone() {
      return new Key(this);
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 1;
    private pb::ByteString value_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HashType" field.</summary>
    public const int HashTypeFieldNumber = 3;
    private uint hashType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HashType {
      get { return hashType_; }
      set {
        hashType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Key);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Key other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      if (Type != other.Type) return false;
      if (HashType != other.HashType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (HashType != 0) hash ^= HashType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Value);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (HashType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(HashType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (HashType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HashType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Key other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.HashType != 0) {
        HashType = other.HashType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Value = input.ReadBytes();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 24: {
            HashType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataPath : pb::IMessage<DataPath> {
    private static readonly pb::MessageParser<DataPath> _parser = new pb::MessageParser<DataPath>(() => new DataPath());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataPath> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.KernelReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataPath() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataPath(DataPath other) : this() {
      chainId_ = other.chainId_ != null ? other.chainId_.Clone() : null;
      blockHeight_ = other.blockHeight_;
      blockProducerAddress_ = other.blockProducerAddress_ != null ? other.blockProducerAddress_.Clone() : null;
      contractAddress_ = other.contractAddress_ != null ? other.contractAddress_.Clone() : null;
      dataProviderHash_ = other.dataProviderHash_ != null ? other.dataProviderHash_.Clone() : null;
      keyHash_ = other.keyHash_ != null ? other.keyHash_.Clone() : null;
      statePath_ = other.statePath_ != null ? other.statePath_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataPath Clone() {
      return new DataPath(this);
    }

    /// <summary>Field number for the "ChainId" field.</summary>
    public const int ChainIdFieldNumber = 1;
    private global::AElf.Common.Hash chainId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Hash ChainId {
      get { return chainId_; }
      set {
        chainId_ = value;
      }
    }

    /// <summary>Field number for the "BlockHeight" field.</summary>
    public const int BlockHeightFieldNumber = 2;
    private ulong blockHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BlockHeight {
      get { return blockHeight_; }
      set {
        blockHeight_ = value;
      }
    }

    /// <summary>Field number for the "BlockProducerAddress" field.</summary>
    public const int BlockProducerAddressFieldNumber = 3;
    private global::AElf.Common.Address blockProducerAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Address BlockProducerAddress {
      get { return blockProducerAddress_; }
      set {
        blockProducerAddress_ = value;
      }
    }

    /// <summary>Field number for the "ContractAddress" field.</summary>
    public const int ContractAddressFieldNumber = 4;
    private global::AElf.Common.Address contractAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Address ContractAddress {
      get { return contractAddress_; }
      set {
        contractAddress_ = value;
      }
    }

    /// <summary>Field number for the "DataProviderHash" field.</summary>
    public const int DataProviderHashFieldNumber = 5;
    private global::AElf.Common.Hash dataProviderHash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Hash DataProviderHash {
      get { return dataProviderHash_; }
      set {
        dataProviderHash_ = value;
      }
    }

    /// <summary>Field number for the "KeyHash" field.</summary>
    public const int KeyHashFieldNumber = 6;
    private global::AElf.Common.Hash keyHash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Hash KeyHash {
      get { return keyHash_; }
      set {
        keyHash_ = value;
      }
    }

    /// <summary>Field number for the "StatePath" field.</summary>
    public const int StatePathFieldNumber = 7;
    private global::AElf.Kernel.StatePath statePath_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Kernel.StatePath StatePath {
      get { return statePath_; }
      set {
        statePath_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataPath);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataPath other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ChainId, other.ChainId)) return false;
      if (BlockHeight != other.BlockHeight) return false;
      if (!object.Equals(BlockProducerAddress, other.BlockProducerAddress)) return false;
      if (!object.Equals(ContractAddress, other.ContractAddress)) return false;
      if (!object.Equals(DataProviderHash, other.DataProviderHash)) return false;
      if (!object.Equals(KeyHash, other.KeyHash)) return false;
      if (!object.Equals(StatePath, other.StatePath)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (chainId_ != null) hash ^= ChainId.GetHashCode();
      if (BlockHeight != 0UL) hash ^= BlockHeight.GetHashCode();
      if (blockProducerAddress_ != null) hash ^= BlockProducerAddress.GetHashCode();
      if (contractAddress_ != null) hash ^= ContractAddress.GetHashCode();
      if (dataProviderHash_ != null) hash ^= DataProviderHash.GetHashCode();
      if (keyHash_ != null) hash ^= KeyHash.GetHashCode();
      if (statePath_ != null) hash ^= StatePath.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (chainId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ChainId);
      }
      if (BlockHeight != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(BlockHeight);
      }
      if (blockProducerAddress_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BlockProducerAddress);
      }
      if (contractAddress_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ContractAddress);
      }
      if (dataProviderHash_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(DataProviderHash);
      }
      if (keyHash_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(KeyHash);
      }
      if (statePath_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(StatePath);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (chainId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChainId);
      }
      if (BlockHeight != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BlockHeight);
      }
      if (blockProducerAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlockProducerAddress);
      }
      if (contractAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContractAddress);
      }
      if (dataProviderHash_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataProviderHash);
      }
      if (keyHash_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(KeyHash);
      }
      if (statePath_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StatePath);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataPath other) {
      if (other == null) {
        return;
      }
      if (other.chainId_ != null) {
        if (chainId_ == null) {
          chainId_ = new global::AElf.Common.Hash();
        }
        ChainId.MergeFrom(other.ChainId);
      }
      if (other.BlockHeight != 0UL) {
        BlockHeight = other.BlockHeight;
      }
      if (other.blockProducerAddress_ != null) {
        if (blockProducerAddress_ == null) {
          blockProducerAddress_ = new global::AElf.Common.Address();
        }
        BlockProducerAddress.MergeFrom(other.BlockProducerAddress);
      }
      if (other.contractAddress_ != null) {
        if (contractAddress_ == null) {
          contractAddress_ = new global::AElf.Common.Address();
        }
        ContractAddress.MergeFrom(other.ContractAddress);
      }
      if (other.dataProviderHash_ != null) {
        if (dataProviderHash_ == null) {
          dataProviderHash_ = new global::AElf.Common.Hash();
        }
        DataProviderHash.MergeFrom(other.DataProviderHash);
      }
      if (other.keyHash_ != null) {
        if (keyHash_ == null) {
          keyHash_ = new global::AElf.Common.Hash();
        }
        KeyHash.MergeFrom(other.KeyHash);
      }
      if (other.statePath_ != null) {
        if (statePath_ == null) {
          statePath_ = new global::AElf.Kernel.StatePath();
        }
        StatePath.MergeFrom(other.StatePath);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (chainId_ == null) {
              chainId_ = new global::AElf.Common.Hash();
            }
            input.ReadMessage(chainId_);
            break;
          }
          case 16: {
            BlockHeight = input.ReadUInt64();
            break;
          }
          case 26: {
            if (blockProducerAddress_ == null) {
              blockProducerAddress_ = new global::AElf.Common.Address();
            }
            input.ReadMessage(blockProducerAddress_);
            break;
          }
          case 34: {
            if (contractAddress_ == null) {
              contractAddress_ = new global::AElf.Common.Address();
            }
            input.ReadMessage(contractAddress_);
            break;
          }
          case 42: {
            if (dataProviderHash_ == null) {
              dataProviderHash_ = new global::AElf.Common.Hash();
            }
            input.ReadMessage(dataProviderHash_);
            break;
          }
          case 50: {
            if (keyHash_ == null) {
              keyHash_ = new global::AElf.Common.Hash();
            }
            input.ReadMessage(keyHash_);
            break;
          }
          case 58: {
            if (statePath_ == null) {
              statePath_ = new global::AElf.Kernel.StatePath();
            }
            input.ReadMessage(statePath_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BinaryMerkleTree : pb::IMessage<BinaryMerkleTree> {
    private static readonly pb::MessageParser<BinaryMerkleTree> _parser = new pb::MessageParser<BinaryMerkleTree>(() => new BinaryMerkleTree());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BinaryMerkleTree> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.KernelReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BinaryMerkleTree() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BinaryMerkleTree(BinaryMerkleTree other) : this() {
      nodes_ = other.nodes_.Clone();
      root_ = other.root_ != null ? other.root_.Clone() : null;
      leafCount_ = other.leafCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BinaryMerkleTree Clone() {
      return new BinaryMerkleTree(this);
    }

    /// <summary>Field number for the "Nodes" field.</summary>
    public const int NodesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Common.Hash> _repeated_nodes_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Common.Hash.Parser);
    private readonly pbc::RepeatedField<global::AElf.Common.Hash> nodes_ = new pbc::RepeatedField<global::AElf.Common.Hash>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Common.Hash> Nodes {
      get { return nodes_; }
    }

    /// <summary>Field number for the "Root" field.</summary>
    public const int RootFieldNumber = 2;
    private global::AElf.Common.Hash root_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Hash Root {
      get { return root_; }
      set {
        root_ = value;
      }
    }

    /// <summary>Field number for the "LeafCount" field.</summary>
    public const int LeafCountFieldNumber = 3;
    private int leafCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeafCount {
      get { return leafCount_; }
      set {
        leafCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BinaryMerkleTree);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BinaryMerkleTree other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!nodes_.Equals(other.nodes_)) return false;
      if (!object.Equals(Root, other.Root)) return false;
      if (LeafCount != other.LeafCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= nodes_.GetHashCode();
      if (root_ != null) hash ^= Root.GetHashCode();
      if (LeafCount != 0) hash ^= LeafCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      nodes_.WriteTo(output, _repeated_nodes_codec);
      if (root_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Root);
      }
      if (LeafCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LeafCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += nodes_.CalculateSize(_repeated_nodes_codec);
      if (root_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Root);
      }
      if (LeafCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeafCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BinaryMerkleTree other) {
      if (other == null) {
        return;
      }
      nodes_.Add(other.nodes_);
      if (other.root_ != null) {
        if (root_ == null) {
          root_ = new global::AElf.Common.Hash();
        }
        Root.MergeFrom(other.Root);
      }
      if (other.LeafCount != 0) {
        LeafCount = other.LeafCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
            break;
          }
          case 18: {
            if (root_ == null) {
              root_ = new global::AElf.Common.Hash();
            }
            input.ReadMessage(root_);
            break;
          }
          case 24: {
            LeafCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StringList : pb::IMessage<StringList> {
    private static readonly pb::MessageParser<StringList> _parser = new pb::MessageParser<StringList>(() => new StringList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StringList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.KernelReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringList(StringList other) : this() {
      values_ = other.values_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringList Clone() {
      return new StringList(this);
    }

    /// <summary>Field number for the "Values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_values_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> values_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StringList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StringList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StringList other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
